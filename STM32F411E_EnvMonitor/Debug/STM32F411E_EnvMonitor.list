
STM32F411E_EnvMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080067b0  080067b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006820  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  20000060  08006880  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dc4  08006880  00008dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002053b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000496a  00000000  00000000  000285cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001642  00000000  00000000  0002ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c038  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e82  00000000  00000000  0004c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae956  00000000  00000000  000700bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ea12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b68  00000000  00000000  0011ea58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001265c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006798 	.word	0x08006798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006798 	.word	0x08006798

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e2:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004e4:	4a21      	ldr	r2, [pc, #132]	@ (800056c <MX_ADC1_Init+0x9c>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000512:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <MX_ADC1_Init+0xa0>)
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000532:	f000 fd6d 	bl	8001010 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 fa1e 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000540:	2301      	movs	r3, #1
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_ADC1_Init+0x98>)
 8000552:	f000 fda1 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fa0e 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000007c 	.word	0x2000007c
 800056c:	40012000 	.word	0x40012000
 8000570:	0f000001 	.word	0x0f000001

08000574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a17      	ldr	r2, [pc, #92]	@ (80005f0 <HAL_ADC_MspInit+0x7c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d127      	bne.n	80005e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	4a15      	ldr	r2, [pc, #84]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 80005a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80005ce:	2312      	movs	r3, #18
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d2:	2303      	movs	r3, #3
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <HAL_ADC_MspInit+0x84>)
 80005e2:	f001 f869 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	@ 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40012000 	.word	0x40012000
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020000 	.word	0x40020000

080005fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <MX_FREERTOS_Init+0x18>)
 8000602:	2100      	movs	r1, #0
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_FREERTOS_Init+0x1c>)
 8000606:	f003 fa77 	bl	8003af8 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	@ (800061c <MX_FREERTOS_Init+0x20>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080067d4 	.word	0x080067d4
 8000618:	08000621 	.word	0x08000621
 800061c:	200000c4 	.word	0x200000c4

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 faf7 	bl	8003c1c <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <MX_GPIO_Init+0x120>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a40      	ldr	r2, [pc, #256]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b3a      	ldr	r3, [pc, #232]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a39      	ldr	r2, [pc, #228]	@ (8000750 <MX_GPIO_Init+0x120>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a32      	ldr	r2, [pc, #200]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <MX_GPIO_Init+0x120>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_GPIO_Init+0x120>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <MX_GPIO_Init+0x120>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_GPIO_Init+0x120>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006b6:	2200      	movs	r2, #0
 80006b8:	211f      	movs	r1, #31
 80006ba:	4826      	ldr	r0, [pc, #152]	@ (8000754 <MX_GPIO_Init+0x124>)
 80006bc:	f001 f980 	bl	80019c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80006c0:	2200      	movs	r2, #0
 80006c2:	f241 01c7 	movw	r1, #4295	@ 0x10c7
 80006c6:	4824      	ldr	r0, [pc, #144]	@ (8000758 <MX_GPIO_Init+0x128>)
 80006c8:	f001 f97a 	bl	80019c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <MX_GPIO_Init+0x12c>)
 80006d4:	f001 f974 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006d8:	231f      	movs	r3, #31
 80006da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4819      	ldr	r0, [pc, #100]	@ (8000754 <MX_GPIO_Init+0x124>)
 80006f0:	f000 ffe2 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <MX_GPIO_Init+0x12c>)
 8000708:	f000 ffd6 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800070c:	f241 03c7 	movw	r3, #4295	@ 0x10c7
 8000710:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <MX_GPIO_Init+0x128>)
 8000726:	f000 ffc7 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <MX_GPIO_Init+0x12c>)
 8000744:	f000 ffb8 	bl	80016b8 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020000 	.word	0x40020000

08000760 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f001 f929 	bl	80019f4 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f8e8 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000c8 	.word	0x200000c8
 80007b4:	40005400 	.word	0x40005400
 80007b8:	000186a0 	.word	0x000186a0

080007bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	@ (8000840 <HAL_I2C_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12c      	bne.n	8000838 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	@ (8000848 <HAL_I2C_MspInit+0x8c>)
 8000818:	f000 ff4e 	bl	80016b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a07      	ldr	r2, [pc, #28]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_I2C_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	@ 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40005400 	.word	0x40005400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 fb9c 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f816 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f7ff feea 	bl	8000630 <MX_GPIO_Init>
  MX_ADC1_Init();
 800085c:	f7ff fe38 	bl	80004d0 <MX_ADC1_Init>
  MX_RTC_Init();
 8000860:	f000 f892 	bl	8000988 <MX_RTC_Init>
  MX_SPI1_Init();
 8000864:	f000 f936 	bl	8000ad4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000868:	f000 f96a 	bl	8000b40 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800086c:	f000 faf2 	bl	8000e54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000870:	f7ff ff76 	bl	8000760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000874:	f003 f8f6 	bl	8003a64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000878:	f7ff fec0 	bl	80005fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800087c:	f003 f916 	bl	8003aac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <main+0x34>

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	@ 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 fe98 	bl	80065c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a27      	ldr	r2, [pc, #156]	@ (8000950 <SystemClock_Config+0xcc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e0:	2309      	movs	r3, #9
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80008fc:	23c8      	movs	r3, #200	@ 0xc8
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f9b5 	bl	8001c7c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000918:	f000 f830 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2103      	movs	r1, #3
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fc17 	bl	800216c <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000944:	f000 f81a 	bl	800097c <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	@ 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096a:	f000 fb31 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010000 	.word	0x40010000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009a2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <MX_RTC_Init+0xc4>)
 80009a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009ae:	227f      	movs	r2, #127	@ 0x7f
 80009b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b2:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009b4:	22ff      	movs	r2, #255	@ 0xff
 80009b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ca:	481f      	ldr	r0, [pc, #124]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009cc:	f001 ff10 	bl	80027f0 <HAL_RTC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009d6:	f7ff ffd1 	bl	800097c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009de:	2300      	movs	r3, #0
 80009e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2201      	movs	r2, #1
 80009f2:	4619      	mov	r1, r3
 80009f4:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <MX_RTC_Init+0xc0>)
 80009f6:	f001 ffa9 	bl	800294c <HAL_RTC_SetTime>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f7ff ffbc 	bl	800097c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a04:	2301      	movs	r3, #1
 8000a06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	2201      	movs	r2, #1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <MX_RTC_Init+0xc0>)
 8000a1c:	f002 f830 	bl	8002a80 <HAL_RTC_SetDate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a26:	f7ff ffa9 	bl	800097c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_RTC_Init+0xc0>)
 8000a30:	f002 f968 	bl	8002d04 <HAL_RTCEx_SetWakeUpTimer>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000a3a:	f7ff ff9f 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000011c 	.word	0x2000011c
 8000a4c:	40002800 	.word	0x40002800

08000a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <HAL_RTC_MspInit+0x50>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d111      	bne.n	8000a98 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a7c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fdc4 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a8e:	f7ff ff75 	bl	800097c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <HAL_RTC_MspInit+0x54>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40002800 	.word	0x40002800
 8000aa4:	42470e3c 	.word	0x42470e3c

08000aa8 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <HAL_RTC_MspDeInit+0x24>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d102      	bne.n	8000ac0 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_RTC_MspDeInit+0x28>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40002800 	.word	0x40002800
 8000ad0:	42470e3c 	.word	0x42470e3c

08000ad4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000ada:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b08:	2220      	movs	r2, #32
 8000b0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_SPI1_Init+0x64>)
 8000b26:	f002 f99e 	bl	8002e66 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b30:	f7ff ff24 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000158 	.word	0x20000158
 8000b3c:	40013000 	.word	0x40013000

08000b40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_SPI2_Init+0x64>)
 8000b92:	f002 f968 	bl	8002e66 <HAL_SPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b9c:	f7ff feee 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001b0 	.word	0x200001b0
 8000ba8:	40003800 	.word	0x40003800

08000bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <HAL_SPI_MspInit+0xe8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12c      	bne.n	8000c28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	4a30      	ldr	r2, [pc, #192]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bde:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c06:	23e0      	movs	r3, #224	@ 0xe0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c16:	2305      	movs	r3, #5
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481e      	ldr	r0, [pc, #120]	@ (8000c9c <HAL_SPI_MspInit+0xf0>)
 8000c22:	f000 fd49 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c26:	e031      	b.n	8000c8c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <HAL_SPI_MspInit+0xf4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_SPI_MspInit+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c6a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <HAL_SPI_MspInit+0xf8>)
 8000c88:	f000 fd16 	bl	80016b8 <HAL_GPIO_Init>
}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40003800 	.word	0x40003800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f000 fcb9 	bl	8001664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	@ 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d18:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fc38 	bl	80025ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d3c:	f001 fc22 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8000d40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d44:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <HAL_InitTick+0xd4>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d52:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <HAL_InitTick+0xdc>)
 8000d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d78:	f002 f8fe 	bl	8002f78 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11b      	bne.n	8000dc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d8c:	f002 f94e 	bl	800302c <HAL_TIM_Base_Start_IT>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d111      	bne.n	8000dc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d9e:	2019      	movs	r0, #25
 8000da0:	f000 fc7c 	bl	800169c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d808      	bhi.n	8000dbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000daa:	2200      	movs	r2, #0
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	2019      	movs	r0, #25
 8000db0:	f000 fc58 	bl	8001664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_InitTick+0xe0>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e002      	b.n	8000dc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e22:	f002 f965 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000208 	.word	0x20000208

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f002 fae2 	bl	8003454 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f7ff fd71 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000250 	.word	0x20000250
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_UART_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12b      	bne.n	8000f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0x8c>)
 8000f1e:	f000 fbcb 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3c:	f7ff ff78 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f005 fb8d 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fc6f 	bl	800084c <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f7c:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 8000f80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f84:	20004dc4 	.word	0x20004dc4

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fb4a 	bl	800164e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f7ff fea0 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe72 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000298 	.word	0x20000298

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000298 	.word	0x20000298

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff faa0 	bl	8000574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f94a 	bl	80012fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e113      	b.n	80012dc <HAL_ADC_ConfigChannel+0x244>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d925      	bls.n	8001110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4403      	add	r3, r0
 8001102:	3b1e      	subs	r3, #30
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	e022      	b.n	8001156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	2207      	movs	r2, #7
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4403      	add	r3, r0
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d824      	bhi.n	80011a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b05      	subs	r3, #5
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	e04c      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d824      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3b23      	subs	r3, #35	@ 0x23
 80011c2:	221f      	movs	r2, #31
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	@ 0x23
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	e023      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b41      	subs	r3, #65	@ 0x41
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	@ 0x41
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <HAL_ADC_ConfigChannel+0x250>)
 8001244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <HAL_ADC_ConfigChannel+0x254>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d10f      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1d8>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d10b      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_ADC_ConfigChannel+0x254>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12b      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x23a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <HAL_ADC_ConfigChannel+0x258>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b11      	cmp	r3, #17
 800128a:	d122      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_ADC_ConfigChannel+0x258>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d111      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_ADC_ConfigChannel+0x25c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <HAL_ADC_ConfigChannel+0x260>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9a      	lsrs	r2, r3, #18
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40012300 	.word	0x40012300
 80012ec:	40012000 	.word	0x40012000
 80012f0:	10000012 	.word	0x10000012
 80012f4:	20000000 	.word	0x20000000
 80012f8:	431bde83 	.word	0x431bde83

080012fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001304:	4b79      	ldr	r3, [pc, #484]	@ (80014ec <ADC_Init+0x1f0>)
 8001306:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	021a      	lsls	r2, r3, #8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138e:	4a58      	ldr	r2, [pc, #352]	@ (80014f0 <ADC_Init+0x1f4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d022      	beq.n	80013da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6899      	ldr	r1, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	e00f      	b.n	80013fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0202 	bic.w	r2, r2, #2
 8001408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7e1b      	ldrb	r3, [r3, #24]
 8001414:	005a      	lsls	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d01b      	beq.n	8001460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001436:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	3b01      	subs	r3, #1
 8001454:	035a      	lsls	r2, r3, #13
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e007      	b.n	8001470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800146e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	3b01      	subs	r3, #1
 800148c:	051a      	lsls	r2, r3, #20
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014b2:	025a      	lsls	r2, r3, #9
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	029a      	lsls	r2, r3, #10
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	609a      	str	r2, [r3, #8]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40012300 	.word	0x40012300
 80014f0:	0f000001 	.word	0x0f000001

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff4c 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001676:	f7ff ff61 	bl	800153c <__NVIC_GetPriorityGrouping>
 800167a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	6978      	ldr	r0, [r7, #20]
 8001682:	f7ff ffb1 	bl	80015e8 <NVIC_EncodePriority>
 8001686:	4602      	mov	r2, r0
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff80 	bl	8001594 <__NVIC_SetPriority>
}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff54 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e159      	b.n	8001988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8148 	bne.w	8001982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d005      	beq.n	800170a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	2b02      	cmp	r3, #2
 8001708:	d130      	bne.n	800176c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b03      	cmp	r3, #3
 8001776:	d017      	beq.n	80017a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a2 	beq.w	8001982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b57      	ldr	r3, [pc, #348]	@ (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a56      	ldr	r2, [pc, #344]	@ (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b54      	ldr	r3, [pc, #336]	@ (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <HAL_GPIO_Init+0x2ec>)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a49      	ldr	r2, [pc, #292]	@ (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x202>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	@ (80019ac <HAL_GPIO_Init+0x2f4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x1fe>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a47      	ldr	r2, [pc, #284]	@ (80019b0 <HAL_GPIO_Init+0x2f8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x1fa>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a46      	ldr	r2, [pc, #280]	@ (80019b4 <HAL_GPIO_Init+0x2fc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x1f6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a45      	ldr	r2, [pc, #276]	@ (80019b8 <HAL_GPIO_Init+0x300>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x1f2>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	@ (80019a4 <HAL_GPIO_Init+0x2ec>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <HAL_GPIO_Init+0x304>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fe:	4a2f      	ldr	r2, [pc, #188]	@ (80019bc <HAL_GPIO_Init+0x304>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_GPIO_Init+0x304>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001928:	4a24      	ldr	r2, [pc, #144]	@ (80019bc <HAL_GPIO_Init+0x304>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_GPIO_Init+0x304>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001952:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <HAL_GPIO_Init+0x304>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001958:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_GPIO_Init+0x304>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800197c:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_GPIO_Init+0x304>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f aea2 	bls.w	80016d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40013c00 	.word	0x40013c00

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e12b      	b.n	8001c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fece 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	@ 0x24
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a58:	f000 fd80 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8001a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a81      	ldr	r2, [pc, #516]	@ (8001c68 <HAL_I2C_Init+0x274>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d807      	bhi.n	8001a78 <HAL_I2C_Init+0x84>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a80      	ldr	r2, [pc, #512]	@ (8001c6c <HAL_I2C_Init+0x278>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	bf94      	ite	ls
 8001a70:	2301      	movls	r3, #1
 8001a72:	2300      	movhi	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e006      	b.n	8001a86 <HAL_I2C_Init+0x92>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c70 <HAL_I2C_Init+0x27c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0e7      	b.n	8001c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4a78      	ldr	r2, [pc, #480]	@ (8001c74 <HAL_I2C_Init+0x280>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0c9b      	lsrs	r3, r3, #18
 8001a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c68 <HAL_I2C_Init+0x274>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d802      	bhi.n	8001ac8 <HAL_I2C_Init+0xd4>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	e009      	b.n	8001adc <HAL_I2C_Init+0xe8>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	4a69      	ldr	r2, [pc, #420]	@ (8001c78 <HAL_I2C_Init+0x284>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	3301      	adds	r3, #1
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	495c      	ldr	r1, [pc, #368]	@ (8001c68 <HAL_I2C_Init+0x274>)
 8001af8:	428b      	cmp	r3, r1
 8001afa:	d819      	bhi.n	8001b30 <HAL_I2C_Init+0x13c>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e59      	subs	r1, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0a:	1c59      	adds	r1, r3, #1
 8001b0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b10:	400b      	ands	r3, r1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_I2C_Init+0x138>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1e59      	subs	r1, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2a:	e051      	b.n	8001bd0 <HAL_I2C_Init+0x1dc>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e04f      	b.n	8001bd0 <HAL_I2C_Init+0x1dc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d111      	bne.n	8001b5c <HAL_I2C_Init+0x168>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	e012      	b.n	8001b82 <HAL_I2C_Init+0x18e>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e58      	subs	r0, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	0099      	lsls	r1, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Init+0x196>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e022      	b.n	8001bd0 <HAL_I2C_Init+0x1dc>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10e      	bne.n	8001bb0 <HAL_I2C_Init+0x1bc>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e58      	subs	r0, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	440b      	add	r3, r1
 8001ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bae:	e00f      	b.n	8001bd0 <HAL_I2C_Init+0x1dc>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e58      	subs	r0, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	0099      	lsls	r1, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	6809      	ldr	r1, [r1, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6911      	ldr	r1, [r2, #16]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68d2      	ldr	r2, [r2, #12]
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	000186a0 	.word	0x000186a0
 8001c6c:	001e847f 	.word	0x001e847f
 8001c70:	003d08ff 	.word	0x003d08ff
 8001c74:	431bde83 	.word	0x431bde83
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e267      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d075      	beq.n	8001d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c9a:	4b88      	ldr	r3, [pc, #544]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b85      	ldr	r3, [pc, #532]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05b      	beq.n	8001d84 <HAL_RCC_OscConfig+0x108>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d157      	bne.n	8001d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e242      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x74>
 8001ce2:	4b76      	ldr	r3, [pc, #472]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b70      	ldr	r3, [pc, #448]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6d      	ldr	r3, [pc, #436]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001d14:	4b69      	ldr	r3, [pc, #420]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a68      	ldr	r2, [pc, #416]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a65      	ldr	r2, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f960 	bl	8000ff8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f95c 	bl	8000ff8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e207      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xc0>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f94c 	bl	8000ff8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f948 	bl	8000ff8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1f3      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b51      	ldr	r3, [pc, #324]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0xe8>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b44      	ldr	r3, [pc, #272]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1c7      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4937      	ldr	r1, [pc, #220]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <HAL_RCC_OscConfig+0x244>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff f901 	bl	8000ff8 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f8fd 	bl	8000ff8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1a8      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4925      	ldr	r1, [pc, #148]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <HAL_RCC_OscConfig+0x244>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f8e0 	bl	8000ff8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f8dc 	bl	8000ff8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e187      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d036      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <HAL_RCC_OscConfig+0x248>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff f8c0 	bl	8000ff8 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f8bc 	bl	8000ff8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e167      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x200>
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_RCC_OscConfig+0x248>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f8a9 	bl	8000ff8 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e00e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f8a5 	bl	8000ff8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e150      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	42470000 	.word	0x42470000
 8001ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b88      	ldr	r3, [pc, #544]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ea      	bne.n	8001eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8097 	beq.w	8002010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b81      	ldr	r3, [pc, #516]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a7c      	ldr	r2, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b7a      	ldr	r3, [pc, #488]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f12:	4b77      	ldr	r3, [pc, #476]	@ (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1e:	4b74      	ldr	r3, [pc, #464]	@ (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a73      	ldr	r2, [pc, #460]	@ (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f865 	bl	8000ff8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff f861 	bl	8000ff8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e10c      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2ea>
 8001f58:	4b64      	ldr	r3, [pc, #400]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a63      	ldr	r2, [pc, #396]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x324>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x30c>
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	4a5e      	ldr	r2, [pc, #376]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x324>
 8001f88:	4b58      	ldr	r3, [pc, #352]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8c:	4a57      	ldr	r2, [pc, #348]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f94:	4b55      	ldr	r3, [pc, #340]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f98:	4a54      	ldr	r2, [pc, #336]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f826 	bl	8000ff8 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f822 	bl	8000ff8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0cb      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	4b49      	ldr	r3, [pc, #292]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ee      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f810 	bl	8000ff8 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f80c 	bl	8000ff8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0b5      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	4a38      	ldr	r2, [pc, #224]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800200e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a1 	beq.w	800215c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201a:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d05c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d141      	bne.n	80020b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b31      	ldr	r3, [pc, #196]	@ (80020f4 <HAL_RCC_OscConfig+0x478>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe ffe0 	bl	8000ff8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe ffdc 	bl	8000ff8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e087      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	3b01      	subs	r3, #1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	491b      	ldr	r1, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x478>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe ffb5 	bl	8000ff8 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe ffb1 	bl	8000ff8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e05c      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x416>
 80020b0:	e054      	b.n	800215c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff9e 	bl	8000ff8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe ff9a 	bl	8000ff8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e045      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
 80020de:	e03d      	b.n	800215c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e038      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x4ec>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d028      	beq.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d121      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d11a      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800212e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d111      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0cc      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b68      	ldr	r3, [pc, #416]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d90c      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b8      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c0:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b50      	ldr	r3, [pc, #320]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	494d      	ldr	r1, [pc, #308]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d044      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d119      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	2b03      	cmp	r3, #3
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b3f      	ldr	r3, [pc, #252]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e067      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4934      	ldr	r1, [pc, #208]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7fe fecc 	bl	8000ff8 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7fe fec8 	bl	8000ff8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d20c      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e032      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4916      	ldr	r1, [pc, #88]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	490e      	ldr	r1, [pc, #56]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022f2:	f000 f821 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490a      	ldr	r1, [pc, #40]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fcf4 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00
 8002328:	40023800 	.word	0x40023800
 800232c:	080067f8 	.word	0x080067f8
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b094      	sub	sp, #80	@ 0x50
 800233e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002350:	4b79      	ldr	r3, [pc, #484]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d00d      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x40>
 800235c:	2b08      	cmp	r3, #8
 800235e:	f200 80e1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002366:	2b04      	cmp	r3, #4
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x3a>
 800236a:	e0db      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b73      	ldr	r3, [pc, #460]	@ (800253c <HAL_RCC_GetSysClockFreq+0x204>)
 800236e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002370:	e0db      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002372:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x208>)
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002376:	e0d8      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002378:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002382:	4b6d      	ldr	r3, [pc, #436]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238e:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	099b      	lsrs	r3, r3, #6
 8002394:	2200      	movs	r2, #0
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023a2:	2300      	movs	r3, #0
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023aa:	4622      	mov	r2, r4
 80023ac:	462b      	mov	r3, r5
 80023ae:	f04f 0000 	mov.w	r0, #0
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	0159      	lsls	r1, r3, #5
 80023b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023bc:	0150      	lsls	r0, r2, #5
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4621      	mov	r1, r4
 80023c4:	1a51      	subs	r1, r2, r1
 80023c6:	6139      	str	r1, [r7, #16]
 80023c8:	4629      	mov	r1, r5
 80023ca:	eb63 0301 	sbc.w	r3, r3, r1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023dc:	4659      	mov	r1, fp
 80023de:	018b      	lsls	r3, r1, #6
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023e6:	4651      	mov	r1, sl
 80023e8:	018a      	lsls	r2, r1, #6
 80023ea:	4651      	mov	r1, sl
 80023ec:	ebb2 0801 	subs.w	r8, r2, r1
 80023f0:	4659      	mov	r1, fp
 80023f2:	eb63 0901 	sbc.w	r9, r3, r1
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800240a:	4690      	mov	r8, r2
 800240c:	4699      	mov	r9, r3
 800240e:	4623      	mov	r3, r4
 8002410:	eb18 0303 	adds.w	r3, r8, r3
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	462b      	mov	r3, r5
 8002418:	eb49 0303 	adc.w	r3, r9, r3
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800242a:	4629      	mov	r1, r5
 800242c:	024b      	lsls	r3, r1, #9
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002434:	4621      	mov	r1, r4
 8002436:	024a      	lsls	r2, r1, #9
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800243e:	2200      	movs	r2, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002448:	f7fd feca 	bl	80001e0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002454:	e058      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	2200      	movs	r2, #0
 800245e:	4618      	mov	r0, r3
 8002460:	4611      	mov	r1, r2
 8002462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	f04f 0000 	mov.w	r0, #0
 8002478:	f04f 0100 	mov.w	r1, #0
 800247c:	0159      	lsls	r1, r3, #5
 800247e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002482:	0150      	lsls	r0, r2, #5
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4641      	mov	r1, r8
 800248a:	ebb2 0a01 	subs.w	sl, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb63 0b01 	sbc.w	fp, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024a8:	ebb2 040a 	subs.w	r4, r2, sl
 80024ac:	eb63 050b 	sbc.w	r5, r3, fp
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	00eb      	lsls	r3, r5, #3
 80024ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024be:	00e2      	lsls	r2, r4, #3
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	4643      	mov	r3, r8
 80024c6:	18e3      	adds	r3, r4, r3
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	464b      	mov	r3, r9
 80024cc:	eb45 0303 	adc.w	r3, r5, r3
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024de:	4629      	mov	r1, r5
 80024e0:	028b      	lsls	r3, r1, #10
 80024e2:	4621      	mov	r1, r4
 80024e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e8:	4621      	mov	r1, r4
 80024ea:	028a      	lsls	r2, r1, #10
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f2:	2200      	movs	r2, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	61fa      	str	r2, [r7, #28]
 80024f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fc:	f7fd fe70 	bl	80001e0 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4613      	mov	r3, r2
 8002506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800251a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetSysClockFreq+0x204>)
 8002526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800252c:	4618      	mov	r0, r3
 800252e:	3750      	adds	r7, #80	@ 0x50
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	08006808 	.word	0x08006808

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffdc 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0b5b      	lsrs	r3, r3, #13
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	08006808 	.word	0x08006808

080025ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	220f      	movs	r2, #15
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_RCC_GetClockConfig+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_GetClockConfig+0x5c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_RCC_GetClockConfig+0x60>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0207 	and.w	r2, r3, #7
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002634:	2b00      	cmp	r3, #0
 8002636:	d038      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002638:	4b68      	ldr	r3, [pc, #416]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800263e:	f7fe fcdb 	bl	8000ff8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002646:	f7fe fcd7 	bl	8000ff8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0bd      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002658:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	071b      	lsls	r3, r3, #28
 8002676:	495a      	ldr	r1, [pc, #360]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800267e:	4b57      	ldr	r3, [pc, #348]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fcb8 	bl	8000ff8 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800268c:	f7fe fcb4 	bl	8000ff8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e09a      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800269e:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8083 	beq.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	4b48      	ldr	r3, [pc, #288]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	4a47      	ldr	r2, [pc, #284]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c8:	4b45      	ldr	r3, [pc, #276]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fc8a 	bl	8000ff8 <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe fc86 	bl	8000ff8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e06c      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80026fa:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02f      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d028      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002724:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800272c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272e:	4b2e      	ldr	r3, [pc, #184]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002734:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800273a:	4a29      	ldr	r2, [pc, #164]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d114      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fc54 	bl	8000ff8 <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fc50 	bl	8000ff8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e034      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002782:	d10d      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002798:	4911      	ldr	r1, [pc, #68]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
 800279e:	e005      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80027a0:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a0e      	ldr	r2, [pc, #56]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027aa:	6093      	str	r3, [r2, #8]
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	4909      	ldr	r1, [pc, #36]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7d1a      	ldrb	r2, [r3, #20]
 80027ce:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	42470068 	.word	0x42470068
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42470e40 	.word	0x42470e40
 80027ec:	424711e0 	.word	0x424711e0

080027f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e091      	b.n	8002926 <HAL_RTC_Init+0x136>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7f5b      	ldrb	r3, [r3, #29]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d123      	bne.n	8002854 <HAL_RTC_Init+0x64>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a46      	ldr	r2, [pc, #280]	@ (8002930 <HAL_RTC_Init+0x140>)
 8002816:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a46      	ldr	r2, [pc, #280]	@ (8002934 <HAL_RTC_Init+0x144>)
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a45      	ldr	r2, [pc, #276]	@ (8002938 <HAL_RTC_Init+0x148>)
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a45      	ldr	r2, [pc, #276]	@ (800293c <HAL_RTC_Init+0x14c>)
 8002828:	62da      	str	r2, [r3, #44]	@ 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a44      	ldr	r2, [pc, #272]	@ (8002940 <HAL_RTC_Init+0x150>)
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_RTC_Init+0x4e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a42      	ldr	r2, [pc, #264]	@ (8002944 <HAL_RTC_Init+0x154>)
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_RTC_Init+0x64>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a3d      	ldr	r2, [pc, #244]	@ (8002948 <HAL_RTC_Init+0x158>)
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b10      	cmp	r3, #16
 8002866:	d055      	beq.n	8002914 <HAL_RTC_Init+0x124>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	22ca      	movs	r2, #202	@ 0xca
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2253      	movs	r2, #83	@ 0x53
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f9b5 	bl	8002be8 <RTC_EnterInitMode>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12c      	bne.n	80028e2 <HAL_RTC_Init+0xf2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800289a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	041a      	lsls	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f9bc 	bl	8002c56 <RTC_ExitInitMode>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d110      	bne.n	800290a <HAL_RTC_Init+0x11a>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	22ff      	movs	r2, #255	@ 0xff
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24
 8002912:	e001      	b.n	8002918 <HAL_RTC_Init+0x128>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_RTC_Init+0x134>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08002b89 	.word	0x08002b89
 8002934:	08002e53 	.word	0x08002e53
 8002938:	08002cdd 	.word	0x08002cdd
 800293c:	08002e3f 	.word	0x08002e3f
 8002940:	08002cf1 	.word	0x08002cf1
 8002944:	08000a51 	.word	0x08000a51
 8002948:	08000aa9 	.word	0x08000aa9

0800294c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_RTC_SetTime+0x1c>
 8002964:	2302      	movs	r3, #2
 8002966:	e087      	b.n	8002a78 <HAL_RTC_SetTime+0x12c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2202      	movs	r2, #2
 8002972:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d126      	bne.n	80029c8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f984 	bl	8002ca0 <RTC_ByteToBcd2>
 8002998:	4603      	mov	r3, r0
 800299a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f97d 	bl	8002ca0 <RTC_ByteToBcd2>
 80029a6:	4603      	mov	r3, r0
 80029a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	789b      	ldrb	r3, [r3, #2]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f975 	bl	8002ca0 <RTC_ByteToBcd2>
 80029b6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	78db      	ldrb	r3, [r3, #3]
 80029c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e018      	b.n	80029fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029e8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80029ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	22ca      	movs	r2, #202	@ 0xca
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2253      	movs	r2, #83	@ 0x53
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8ec 	bl	8002be8 <RTC_EnterInitMode>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d120      	bne.n	8002a5c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002a24:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002a28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8ff 	bl	8002c56 <RTC_ExitInitMode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	22ff      	movs	r2, #255	@ 0xff
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]

  return status;
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	7f1b      	ldrb	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RTC_SetDate+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e071      	b.n	8002b80 <HAL_RTC_SetDate+0x100>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10e      	bne.n	8002acc <HAL_RTC_SetDate+0x4c>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	785b      	ldrb	r3, [r3, #1]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	f023 0310 	bic.w	r3, r3, #16
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	330a      	adds	r3, #10
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	78db      	ldrb	r3, [r3, #3]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f8e2 	bl	8002ca0 <RTC_ByteToBcd2>
 8002adc:	4603      	mov	r3, r0
 8002ade:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f8db 	bl	8002ca0 <RTC_ByteToBcd2>
 8002aea:	4603      	mov	r3, r0
 8002aec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002aee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	789b      	ldrb	r3, [r3, #2]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f8d3 	bl	8002ca0 <RTC_ByteToBcd2>
 8002afa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002afc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e00e      	b.n	8002b2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	78db      	ldrb	r3, [r3, #3]
 8002b10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	22ca      	movs	r2, #202	@ 0xca
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2253      	movs	r2, #83	@ 0x53
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f854 	bl	8002be8 <RTC_EnterInitMode>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f87b 	bl	8002c56 <RTC_ExitInitMode>
 8002b60:	4603      	mov	r3, r0
 8002b62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	22ff      	movs	r2, #255	@ 0xff
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]

  return status;
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}

08002b88 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <HAL_RTC_WaitForSynchro+0x48>)
 8002bae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7fe fa22 	bl	8000ff8 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bb8:	f7fe fa1e 	bl	8000ff8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bc6:	d901      	bls.n	8002bcc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e007      	b.n	8002bdc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ee      	beq.n	8002bb8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00013f5f 	.word	0x00013f5f

08002be8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d122      	bne.n	8002c4c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c16:	f7fe f9ef 	bl	8000ff8 <HAL_GetTick>
 8002c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c1c:	e00c      	b.n	8002c38 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c1e:	f7fe f9eb 	bl	8000ff8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c2c:	d904      	bls.n	8002c38 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <RTC_EnterInitMode+0x64>
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d1e8      	bne.n	8002c1e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c70:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff8b 	bl	8002b9c <HAL_RTC_WaitForSynchro>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002cae:	e005      	b.n	8002cbc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	3b0a      	subs	r3, #10
 8002cba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b09      	cmp	r3, #9
 8002cc0:	d8f6      	bhi.n	8002cb0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	7f1b      	ldrb	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e08a      	b.n	8002e36 <HAL_RTCEx_SetWakeUpTimer+0x132>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	22ca      	movs	r2, #202	@ 0xca
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2253      	movs	r2, #83	@ 0x53
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01e      	beq.n	8002d88 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8002d4a:	f7fe f955 	bl	8000ff8 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8002d50:	e013      	b.n	8002d7a <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d52:	f7fe f951 	bl	8000ff8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d60:	d90b      	bls.n	8002d7a <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	22ff      	movs	r2, #255	@ 0xff
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e05d      	b.n	8002e36 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e4      	bne.n	8002d52 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d96:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002da8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002daa:	f7fe f925 	bl	8000ff8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002db0:	e013      	b.n	8002dda <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002db2:	f7fe f921 	bl	8000ff8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dc0:	d90b      	bls.n	8002dda <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	22ff      	movs	r2, #255	@ 0xff
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e02d      	b.n	8002e36 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0e4      	beq.n	8002db2 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0207 	bic.w	r2, r2, #7
 8002df6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ff      	movs	r2, #255	@ 0xff
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e07b      	b.n	8002f70 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e88:	d009      	beq.n	8002e9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
 8002e90:	e005      	b.n	8002e9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7fd fe77 	bl	8000bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	ea42 0103 	orr.w	r1, r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	f003 0104 	and.w	r1, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f003 0210 	and.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e041      	b.n	800300e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f839 	bl	8003016 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 f9b2 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e044      	b.n	80030ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306e:	d013      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	@ (80030e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x6c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d010      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	e007      	b.n	80030cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40014000 	.word	0x40014000

080030f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0202 	mvn.w	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8d2 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8c4 	bl	80032d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8d5 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d020      	beq.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0204 	mvn.w	r2, #4
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8ac 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f89e 	bl	80032d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8af 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d020      	beq.n	80031ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0208 	mvn.w	r2, #8
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f886 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f878 	bl	80032d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f889 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d020      	beq.n	8003238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0210 	mvn.w	r2, #16
 8003208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2208      	movs	r2, #8
 800320e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f860 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f852 	bl	80032d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f863 	bl	80032f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0201 	mvn.w	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fb7e 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8e0 	bl	8003440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f834 	bl	800330c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0220 	mvn.w	r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8b2 	bl	800342c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <TIM_Base_SetConfig+0xf0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a34      	ldr	r2, [pc, #208]	@ (8003414 <TIM_Base_SetConfig+0xf4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a33      	ldr	r2, [pc, #204]	@ (8003418 <TIM_Base_SetConfig+0xf8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a32      	ldr	r2, [pc, #200]	@ (800341c <TIM_Base_SetConfig+0xfc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <TIM_Base_SetConfig+0xf0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01b      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d017      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a25      	ldr	r2, [pc, #148]	@ (8003414 <TIM_Base_SetConfig+0xf4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <TIM_Base_SetConfig+0xf8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00f      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a23      	ldr	r2, [pc, #140]	@ (800341c <TIM_Base_SetConfig+0xfc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00b      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <TIM_Base_SetConfig+0x100>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <TIM_Base_SetConfig+0x104>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a20      	ldr	r2, [pc, #128]	@ (8003428 <TIM_Base_SetConfig+0x108>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003410 <TIM_Base_SetConfig+0xf0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d103      	bne.n	80033ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800

0800342c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e042      	b.n	80034ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fd14 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f82b 	bl	80034f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b0c0      	sub	sp, #256	@ 0x100
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	ea40 0301 	orr.w	r3, r0, r1
 800351c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	431a      	orrs	r2, r3
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	431a      	orrs	r2, r3
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800354c:	f021 010c 	bic.w	r1, r1, #12
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800355a:	430b      	orrs	r3, r1
 800355c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356e:	6999      	ldr	r1, [r3, #24]
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	ea40 0301 	orr.w	r3, r0, r1
 800357a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b8f      	ldr	r3, [pc, #572]	@ (80037c0 <UART_SetConfig+0x2cc>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d005      	beq.n	8003594 <UART_SetConfig+0xa0>
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b8d      	ldr	r3, [pc, #564]	@ (80037c4 <UART_SetConfig+0x2d0>)
 8003590:	429a      	cmp	r2, r3
 8003592:	d104      	bne.n	800359e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003594:	f7fe fff6 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003598:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800359c:	e003      	b.n	80035a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359e:	f7fe ffdd 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80035a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b0:	f040 810c 	bne.w	80037cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	1891      	adds	r1, r2, r2
 80035cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035ce:	415b      	adcs	r3, r3
 80035d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035d6:	4621      	mov	r1, r4
 80035d8:	eb12 0801 	adds.w	r8, r2, r1
 80035dc:	4629      	mov	r1, r5
 80035de:	eb43 0901 	adc.w	r9, r3, r1
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	4623      	mov	r3, r4
 80035fc:	eb18 0303 	adds.w	r3, r8, r3
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003604:	462b      	mov	r3, r5
 8003606:	eb49 0303 	adc.w	r3, r9, r3
 800360a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800361a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800361e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003622:	460b      	mov	r3, r1
 8003624:	18db      	adds	r3, r3, r3
 8003626:	653b      	str	r3, [r7, #80]	@ 0x50
 8003628:	4613      	mov	r3, r2
 800362a:	eb42 0303 	adc.w	r3, r2, r3
 800362e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003638:	f7fc fdd2 	bl	80001e0 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4b61      	ldr	r3, [pc, #388]	@ (80037c8 <UART_SetConfig+0x2d4>)
 8003642:	fba3 2302 	umull	r2, r3, r3, r2
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	011c      	lsls	r4, r3, #4
 800364a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003654:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003664:	415b      	adcs	r3, r3
 8003666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800366c:	4641      	mov	r1, r8
 800366e:	eb12 0a01 	adds.w	sl, r2, r1
 8003672:	4649      	mov	r1, r9
 8003674:	eb43 0b01 	adc.w	fp, r3, r1
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368c:	4692      	mov	sl, r2
 800368e:	469b      	mov	fp, r3
 8003690:	4643      	mov	r3, r8
 8003692:	eb1a 0303 	adds.w	r3, sl, r3
 8003696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800369a:	464b      	mov	r3, r9
 800369c:	eb4b 0303 	adc.w	r3, fp, r3
 80036a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036b8:	460b      	mov	r3, r1
 80036ba:	18db      	adds	r3, r3, r3
 80036bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80036be:	4613      	mov	r3, r2
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036ce:	f7fc fd87 	bl	80001e0 <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <UART_SetConfig+0x2d4>)
 80036da:	fba3 2301 	umull	r2, r3, r3, r1
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2264      	movs	r2, #100	@ 0x64
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	1acb      	subs	r3, r1, r3
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036ee:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <UART_SetConfig+0x2d4>)
 80036f0:	fba3 2302 	umull	r2, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036fc:	441c      	add	r4, r3
 80036fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003708:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800370c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003710:	4642      	mov	r2, r8
 8003712:	464b      	mov	r3, r9
 8003714:	1891      	adds	r1, r2, r2
 8003716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003718:	415b      	adcs	r3, r3
 800371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003720:	4641      	mov	r1, r8
 8003722:	1851      	adds	r1, r2, r1
 8003724:	6339      	str	r1, [r7, #48]	@ 0x30
 8003726:	4649      	mov	r1, r9
 8003728:	414b      	adcs	r3, r1
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003738:	4659      	mov	r1, fp
 800373a:	00cb      	lsls	r3, r1, #3
 800373c:	4651      	mov	r1, sl
 800373e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003742:	4651      	mov	r1, sl
 8003744:	00ca      	lsls	r2, r1, #3
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	4603      	mov	r3, r0
 800374c:	4642      	mov	r2, r8
 800374e:	189b      	adds	r3, r3, r2
 8003750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003754:	464b      	mov	r3, r9
 8003756:	460a      	mov	r2, r1
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800376c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003774:	460b      	mov	r3, r1
 8003776:	18db      	adds	r3, r3, r3
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800377a:	4613      	mov	r3, r2
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800378a:	f7fc fd29 	bl	80001e0 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <UART_SetConfig+0x2d4>)
 8003794:	fba3 1302 	umull	r1, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2164      	movs	r1, #100	@ 0x64
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	3332      	adds	r3, #50	@ 0x32
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <UART_SetConfig+0x2d4>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 0207 	and.w	r2, r3, #7
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4422      	add	r2, r4
 80037ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037bc:	e106      	b.n	80039cc <UART_SetConfig+0x4d8>
 80037be:	bf00      	nop
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40011400 	.word	0x40011400
 80037c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037de:	4642      	mov	r2, r8
 80037e0:	464b      	mov	r3, r9
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	6239      	str	r1, [r7, #32]
 80037e6:	415b      	adcs	r3, r3
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ee:	4641      	mov	r1, r8
 80037f0:	1854      	adds	r4, r2, r1
 80037f2:	4649      	mov	r1, r9
 80037f4:	eb43 0501 	adc.w	r5, r3, r1
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	00eb      	lsls	r3, r5, #3
 8003802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003806:	00e2      	lsls	r2, r4, #3
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	4643      	mov	r3, r8
 800380e:	18e3      	adds	r3, r4, r3
 8003810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003814:	464b      	mov	r3, r9
 8003816:	eb45 0303 	adc.w	r3, r5, r3
 800381a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800382a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800383a:	4629      	mov	r1, r5
 800383c:	008b      	lsls	r3, r1, #2
 800383e:	4621      	mov	r1, r4
 8003840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003844:	4621      	mov	r1, r4
 8003846:	008a      	lsls	r2, r1, #2
 8003848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800384c:	f7fc fcc8 	bl	80001e0 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4b60      	ldr	r3, [pc, #384]	@ (80039d8 <UART_SetConfig+0x4e4>)
 8003856:	fba3 2302 	umull	r2, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	011c      	lsls	r4, r3, #4
 800385e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003868:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800386c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	61b9      	str	r1, [r7, #24]
 8003878:	415b      	adcs	r3, r3
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6139      	str	r1, [r7, #16]
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b4:	464b      	mov	r3, r9
 80038b6:	460a      	mov	r2, r1
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038d8:	4649      	mov	r1, r9
 80038da:	008b      	lsls	r3, r1, #2
 80038dc:	4641      	mov	r1, r8
 80038de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e2:	4641      	mov	r1, r8
 80038e4:	008a      	lsls	r2, r1, #2
 80038e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038ea:	f7fc fc79 	bl	80001e0 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <UART_SetConfig+0x4e4>)
 80038f6:	fba3 2301 	umull	r2, r3, r3, r1
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2264      	movs	r2, #100	@ 0x64
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	1acb      	subs	r3, r1, r3
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	3332      	adds	r3, #50	@ 0x32
 8003908:	4a33      	ldr	r2, [pc, #204]	@ (80039d8 <UART_SetConfig+0x4e4>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003914:	441c      	add	r4, r3
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	673b      	str	r3, [r7, #112]	@ 0x70
 800391e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003924:	4642      	mov	r2, r8
 8003926:	464b      	mov	r3, r9
 8003928:	1891      	adds	r1, r2, r2
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	415b      	adcs	r3, r3
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003934:	4641      	mov	r1, r8
 8003936:	1851      	adds	r1, r2, r1
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	4649      	mov	r1, r9
 800393c:	414b      	adcs	r3, r1
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800394c:	4659      	mov	r1, fp
 800394e:	00cb      	lsls	r3, r1, #3
 8003950:	4651      	mov	r1, sl
 8003952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003956:	4651      	mov	r1, sl
 8003958:	00ca      	lsls	r2, r1, #3
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	4603      	mov	r3, r0
 8003960:	4642      	mov	r2, r8
 8003962:	189b      	adds	r3, r3, r2
 8003964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003966:	464b      	mov	r3, r9
 8003968:	460a      	mov	r2, r1
 800396a:	eb42 0303 	adc.w	r3, r2, r3
 800396e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	663b      	str	r3, [r7, #96]	@ 0x60
 800397a:	667a      	str	r2, [r7, #100]	@ 0x64
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003988:	4649      	mov	r1, r9
 800398a:	008b      	lsls	r3, r1, #2
 800398c:	4641      	mov	r1, r8
 800398e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003992:	4641      	mov	r1, r8
 8003994:	008a      	lsls	r2, r1, #2
 8003996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800399a:	f7fc fc21 	bl	80001e0 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <UART_SetConfig+0x4e4>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	@ 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	@ 0x32
 80039b6:	4a08      	ldr	r2, [pc, #32]	@ (80039d8 <UART_SetConfig+0x4e4>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4422      	add	r2, r4
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039d2:	46bd      	mov	sp, r7
 80039d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d8:	51eb851f 	.word	0x51eb851f

080039dc <__NVIC_SetPriority>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	@ (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	@ (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <SysTick_Handler+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a38:	f001 fd46 	bl	80054c8 <xTaskGetSchedulerState>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a42:	f002 fb41 	bl	80060c8 <xPortSysTickHandler>
  }
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a54:	2100      	movs	r1, #0
 8003a56:	f06f 0004 	mvn.w	r0, #4
 8003a5a:	f7ff ffbf 	bl	80039dc <__NVIC_SetPriority>
#endif
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6a:	f3ef 8305 	mrs	r3, IPSR
 8003a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a76:	f06f 0305 	mvn.w	r3, #5
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	e00c      	b.n	8003a98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <osKernelInitialize+0x44>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a86:	4b08      	ldr	r3, [pc, #32]	@ (8003aa8 <osKernelInitialize+0x44>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	e002      	b.n	8003a98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a98:	687b      	ldr	r3, [r7, #4]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2000029c 	.word	0x2000029c

08003aac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab2:	f3ef 8305 	mrs	r3, IPSR
 8003ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003abe:	f06f 0305 	mvn.w	r3, #5
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	e010      	b.n	8003ae8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <osKernelStart+0x48>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d109      	bne.n	8003ae2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ace:	f7ff ffbf 	bl	8003a50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ad2:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <osKernelStart+0x48>)
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ad8:	f001 f892 	bl	8004c00 <vTaskStartScheduler>
      stat = osOK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e002      	b.n	8003ae8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000029c 	.word	0x2000029c

08003af8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08e      	sub	sp, #56	@ 0x38
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b08:	f3ef 8305 	mrs	r3, IPSR
 8003b0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d17e      	bne.n	8003c12 <osThreadNew+0x11a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d07b      	beq.n	8003c12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b1e:	2318      	movs	r3, #24
 8003b20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d045      	beq.n	8003bbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <osThreadNew+0x48>
        name = attr->name;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <osThreadNew+0x6e>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2b38      	cmp	r3, #56	@ 0x38
 8003b58:	d805      	bhi.n	8003b66 <osThreadNew+0x6e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <osThreadNew+0x72>
        return (NULL);
 8003b66:	2300      	movs	r3, #0
 8003b68:	e054      	b.n	8003c14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <osThreadNew+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b88:	d90a      	bls.n	8003ba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <osThreadNew+0xa8>
        mem = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e010      	b.n	8003bc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <osThreadNew+0xca>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <osThreadNew+0xca>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <osThreadNew+0xca>
          mem = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e001      	b.n	8003bc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d110      	bne.n	8003bea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bd0:	9202      	str	r2, [sp, #8]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fe1a 	bl	8004818 <xTaskCreateStatic>
 8003be4:	4603      	mov	r3, r0
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e013      	b.n	8003c12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d110      	bne.n	8003c12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fe68 	bl	80048d8 <xTaskCreate>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <osThreadNew+0x11a>
            hTask = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c12:	693b      	ldr	r3, [r7, #16]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3728      	adds	r7, #40	@ 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c24:	f3ef 8305 	mrs	r3, IPSR
 8003c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <osDelay+0x1c>
    stat = osErrorISR;
 8003c30:	f06f 0305 	mvn.w	r3, #5
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e007      	b.n	8003c48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 ffa6 	bl	8004b94 <vTaskDelay>
    }
  }

  return (stat);
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a07      	ldr	r2, [pc, #28]	@ (8003c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4a06      	ldr	r2, [pc, #24]	@ (8003c84 <vApplicationGetIdleTaskMemory+0x30>)
 8003c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2280      	movs	r2, #128	@ 0x80
 8003c70:	601a      	str	r2, [r3, #0]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	200002a0 	.word	0x200002a0
 8003c84:	20000348 	.word	0x20000348

08003c88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a07      	ldr	r2, [pc, #28]	@ (8003cb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <vApplicationGetTimerTaskMemory+0x30>)
 8003c9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	20000548 	.word	0x20000548
 8003cb8:	200005f0 	.word	0x200005f0

08003cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f103 0208 	add.w	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f103 0208 	add.w	r2, r3, #8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f103 0208 	add.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	601a      	str	r2, [r3, #0]
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d103      	bne.n	8003d7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e00c      	b.n	8003d98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3308      	adds	r3, #8
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e002      	b.n	8003d8c <vListInsert+0x2e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d2f6      	bcs.n	8003d86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6892      	ldr	r2, [r2, #8]
 8003de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6852      	ldr	r2, [r2, #4]
 8003df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d103      	bne.n	8003e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e50:	f002 f8aa 	bl	8005fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	3b01      	subs	r3, #1
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	@ 0xff
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	22ff      	movs	r2, #255	@ 0xff
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d114      	bne.n	8003ed0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01a      	beq.n	8003ee4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f942 	bl	800513c <xTaskRemoveFromEventList>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <xQueueGenericReset+0xd0>)
 8003ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	e009      	b.n	8003ee4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fef1 	bl	8003cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3324      	adds	r3, #36	@ 0x24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff feec 	bl	8003cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ee4:	f002 f892 	bl	800600c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	@ 0x38
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <xQueueGenericCreateStatic+0x56>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xQueueGenericCreateStatic+0x5a>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <xQueueGenericCreateStatic+0x5c>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	623b      	str	r3, [r7, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <xQueueGenericCreateStatic+0x84>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <xQueueGenericCreateStatic+0x88>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <xQueueGenericCreateStatic+0x8a>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	61fb      	str	r3, [r7, #28]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f9e:	2350      	movs	r3, #80	@ 0x50
 8003fa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b50      	cmp	r3, #80	@ 0x50
 8003fa6:	d00b      	beq.n	8003fc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	61bb      	str	r3, [r7, #24]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f805 	bl	8003ff2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3730      	adds	r7, #48	@ 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e002      	b.n	8004014 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004020:	2101      	movs	r1, #1
 8004022:	69b8      	ldr	r0, [r7, #24]
 8004024:	f7ff fefe 	bl	8003e24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08e      	sub	sp, #56	@ 0x38
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004046:	2300      	movs	r3, #0
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <xQueueGenericSend+0x34>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d103      	bne.n	800407a <xQueueGenericSend+0x42>
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <xQueueGenericSend+0x46>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xQueueGenericSend+0x48>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xQueueGenericSend+0x64>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d103      	bne.n	80040aa <xQueueGenericSend+0x72>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <xQueueGenericSend+0x76>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xQueueGenericSend+0x78>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <xQueueGenericSend+0x94>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	623b      	str	r3, [r7, #32]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040cc:	f001 f9fc 	bl	80054c8 <xTaskGetSchedulerState>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <xQueueGenericSend+0xa4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <xQueueGenericSend+0xa8>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <xQueueGenericSend+0xaa>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <xQueueGenericSend+0xc6>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	61fb      	str	r3, [r7, #28]
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	e7fd      	b.n	80040fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040fe:	f001 ff53 	bl	8005fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <xQueueGenericSend+0xdc>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d129      	bne.n	8004168 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800411a:	f000 fa0f 	bl	800453c <prvCopyDataToQueue>
 800411e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	3324      	adds	r3, #36	@ 0x24
 800412c:	4618      	mov	r0, r3
 800412e:	f001 f805 	bl	800513c <xTaskRemoveFromEventList>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b3f      	ldr	r3, [pc, #252]	@ (8004238 <xQueueGenericSend+0x200>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e00a      	b.n	8004160 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <xQueueGenericSend+0x200>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004160:	f001 ff54 	bl	800600c <vPortExitCritical>
				return pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	e063      	b.n	8004230 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416e:	f001 ff4d 	bl	800600c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004172:	2300      	movs	r3, #0
 8004174:	e05c      	b.n	8004230 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f83f 	bl	8005204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418a:	f001 ff3f 	bl	800600c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418e:	f000 fda7 	bl	8004ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004192:	f001 ff09 	bl	8005fa8 <vPortEnterCritical>
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <xQueueGenericSend+0x174>
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <xQueueGenericSend+0x18a>
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c2:	f001 ff23 	bl	800600c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f82e 	bl	8005230 <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d124      	bne.n	8004224 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041dc:	f000 faa6 	bl	800472c <prvIsQueueFull>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	3310      	adds	r3, #16
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 ff52 	bl	8005098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041f6:	f000 fa31 	bl	800465c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fd7f 	bl	8004cfc <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f af7c 	bne.w	80040fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004206:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <xQueueGenericSend+0x200>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	e772      	b.n	80040fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800421a:	f000 fa1f 	bl	800465c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800421e:	f000 fd6d 	bl	8004cfc <xTaskResumeAll>
 8004222:	e76c      	b.n	80040fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004226:	f000 fa19 	bl	800465c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800422a:	f000 fd67 	bl	8004cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800422e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004230:	4618      	mov	r0, r3
 8004232:	3738      	adds	r7, #56	@ 0x38
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b090      	sub	sp, #64	@ 0x40
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <xQueueGenericSendFromISR+0x3e>
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <xQueueGenericSendFromISR+0x42>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <xQueueGenericSendFromISR+0x44>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d103      	bne.n	80042aa <xQueueGenericSendFromISR+0x6e>
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <xQueueGenericSendFromISR+0x72>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <xQueueGenericSendFromISR+0x74>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	623b      	str	r3, [r7, #32]
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042cc:	f001 ff4c 	bl	8006168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042d0:	f3ef 8211 	mrs	r2, BASEPRI
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <xQueueGenericSendFromISR+0xc2>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d12f      	bne.n	800435e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004314:	f000 f912 	bl	800453c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004318:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d112      	bne.n	8004348 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	3324      	adds	r3, #36	@ 0x24
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ff04 	bl	800513c <xTaskRemoveFromEventList>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800434c:	3301      	adds	r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	b25a      	sxtb	r2, r3
 8004352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004358:	2301      	movs	r3, #1
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800435c:	e001      	b.n	8004362 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800435e:	2300      	movs	r3, #0
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800436c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800436e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004370:	4618      	mov	r0, r3
 8004372:	3740      	adds	r7, #64	@ 0x40
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	@ 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <xQueueReceive+0x32>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	623b      	str	r3, [r7, #32]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueReceive+0x40>
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueReceive+0x44>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueReceive+0x46>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <xQueueReceive+0x62>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043da:	f001 f875 	bl	80054c8 <xTaskGetSchedulerState>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xQueueReceive+0x72>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xQueueReceive+0x76>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueReceive+0x78>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueReceive+0x94>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	61bb      	str	r3, [r7, #24]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440c:	f001 fdcc 	bl	8005fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01f      	beq.n	800445c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004420:	f000 f8f6 	bl	8004610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00f      	beq.n	8004454 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	3310      	adds	r3, #16
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fe7f 	bl	800513c <xTaskRemoveFromEventList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004444:	4b3c      	ldr	r3, [pc, #240]	@ (8004538 <xQueueReceive+0x1c0>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004454:	f001 fdda 	bl	800600c <vPortExitCritical>
				return pdPASS;
 8004458:	2301      	movs	r3, #1
 800445a:	e069      	b.n	8004530 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004462:	f001 fdd3 	bl	800600c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004466:	2300      	movs	r3, #0
 8004468:	e062      	b.n	8004530 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004470:	f107 0310 	add.w	r3, r7, #16
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fec5 	bl	8005204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800447a:	2301      	movs	r3, #1
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800447e:	f001 fdc5 	bl	800600c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004482:	f000 fc2d 	bl	8004ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004486:	f001 fd8f 	bl	8005fa8 <vPortEnterCritical>
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004490:	b25b      	sxtb	r3, r3
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d103      	bne.n	80044a0 <xQueueReceive+0x128>
 8004498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d103      	bne.n	80044b6 <xQueueReceive+0x13e>
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044b6:	f001 fda9 	bl	800600c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ba:	1d3a      	adds	r2, r7, #4
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 feb4 	bl	8005230 <xTaskCheckForTimeOut>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d123      	bne.n	8004516 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044d0:	f000 f916 	bl	8004700 <prvIsQueueEmpty>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	3324      	adds	r3, #36	@ 0x24
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fdd8 	bl	8005098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044ea:	f000 f8b7 	bl	800465c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044ee:	f000 fc05 	bl	8004cfc <xTaskResumeAll>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d189      	bne.n	800440c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80044f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <xQueueReceive+0x1c0>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	e780      	b.n	800440c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800450a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800450c:	f000 f8a6 	bl	800465c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004510:	f000 fbf4 	bl	8004cfc <xTaskResumeAll>
 8004514:	e77a      	b.n	800440c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004518:	f000 f8a0 	bl	800465c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800451c:	f000 fbee 	bl	8004cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004522:	f000 f8ed 	bl	8004700 <prvIsQueueEmpty>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	f43f af6f 	beq.w	800440c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800452e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004530:	4618      	mov	r0, r3
 8004532:	3730      	adds	r7, #48	@ 0x30
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d14d      	bne.n	80045fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ffcc 	bl	8005504 <xTaskPriorityDisinherit>
 800456c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	e043      	b.n	80045fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d119      	bne.n	80045b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6858      	ldr	r0, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	461a      	mov	r2, r3
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	f002 f8a2 	bl	80066d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d32b      	bcc.n	80045fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	e026      	b.n	80045fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68d8      	ldr	r0, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	461a      	mov	r2, r3
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	f002 f888 	bl	80066d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	425b      	negs	r3, r3
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d207      	bcs.n	80045ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	425b      	negs	r3, r3
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d105      	bne.n	80045fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004606:	697b      	ldr	r3, [r7, #20]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	441a      	add	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d303      	bcc.n	8004644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68d9      	ldr	r1, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	461a      	mov	r2, r3
 800464e:	6838      	ldr	r0, [r7, #0]
 8004650:	f002 f83e 	bl	80066d0 <memcpy>
	}
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004664:	f001 fca0 	bl	8005fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800466e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004670:	e011      	b.n	8004696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d012      	beq.n	80046a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3324      	adds	r3, #36	@ 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd5c 	bl	800513c <xTaskRemoveFromEventList>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800468a:	f000 fe35 	bl	80052f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	3b01      	subs	r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dce9      	bgt.n	8004672 <prvUnlockQueue+0x16>
 800469e:	e000      	b.n	80046a2 <prvUnlockQueue+0x46>
					break;
 80046a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	22ff      	movs	r2, #255	@ 0xff
 80046a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 fcaf 	bl	800600c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ae:	f001 fc7b 	bl	8005fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ba:	e011      	b.n	80046e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3310      	adds	r3, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fd37 	bl	800513c <xTaskRemoveFromEventList>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046d4:	f000 fe10 	bl	80052f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	3b01      	subs	r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dce9      	bgt.n	80046bc <prvUnlockQueue+0x60>
 80046e8:	e000      	b.n	80046ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	22ff      	movs	r2, #255	@ 0xff
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80046f4:	f001 fc8a 	bl	800600c <vPortExitCritical>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004708:	f001 fc4e 	bl	8005fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e001      	b.n	800471e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800471e:	f001 fc75 	bl	800600c <vPortExitCritical>

	return xReturn;
 8004722:	68fb      	ldr	r3, [r7, #12]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004734:	f001 fc38 	bl	8005fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	429a      	cmp	r2, r3
 8004742:	d102      	bne.n	800474a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e001      	b.n	800474e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800474e:	f001 fc5d 	bl	800600c <vPortExitCritical>

	return xReturn;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e014      	b.n	8004796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800476c:	4a0f      	ldr	r2, [pc, #60]	@ (80047ac <vQueueAddToRegistry+0x50>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004778:	490c      	ldr	r1, [pc, #48]	@ (80047ac <vQueueAddToRegistry+0x50>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004782:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <vQueueAddToRegistry+0x50>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800478e:	e006      	b.n	800479e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b07      	cmp	r3, #7
 800479a:	d9e7      	bls.n	800476c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	200009f0 	.word	0x200009f0

080047b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047c0:	f001 fbf2 	bl	8005fa8 <vPortEnterCritical>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d103      	bne.n	80047da <vQueueWaitForMessageRestricted+0x2a>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d103      	bne.n	80047f0 <vQueueWaitForMessageRestricted+0x40>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f0:	f001 fc0c 	bl	800600c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3324      	adds	r3, #36	@ 0x24
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc6d 	bl	80050e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff26 	bl	800465c <prvUnlockQueue>
	}
 8004810:	bf00      	nop
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	@ 0x38
 800481c:	af04      	add	r7, sp, #16
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <xTaskCreateStatic+0x2c>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	623b      	str	r3, [r7, #32]
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <xTaskCreateStatic+0x4a>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	61fb      	str	r3, [r7, #28]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004862:	23a8      	movs	r3, #168	@ 0xa8
 8004864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2ba8      	cmp	r3, #168	@ 0xa8
 800486a:	d00b      	beq.n	8004884 <xTaskCreateStatic+0x6c>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	61bb      	str	r3, [r7, #24]
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004884:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <xTaskCreateStatic+0xb2>
 800488c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01b      	beq.n	80048ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048a4:	2300      	movs	r3, #0
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f851 	bl	8004964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048c4:	f000 f8f6 	bl	8004ab4 <prvAddNewTaskToReadyList>
 80048c8:	e001      	b.n	80048ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048ce:	697b      	ldr	r3, [r7, #20]
	}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	@ 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	@ 0x30
 80048dc:	af04      	add	r7, sp, #16
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fc7d 	bl	80061ec <pvPortMalloc>
 80048f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048fa:	20a8      	movs	r0, #168	@ 0xa8
 80048fc:	f001 fc76 	bl	80061ec <pvPortMalloc>
 8004900:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
 800490e:	e005      	b.n	800491c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f001 fd39 	bl	8006388 <vPortFree>
 8004916:	e001      	b.n	800491c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d017      	beq.n	8004952 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	2300      	movs	r3, #0
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f80f 	bl	8004964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004946:	69f8      	ldr	r0, [r7, #28]
 8004948:	f000 f8b4 	bl	8004ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800494c:	2301      	movs	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e002      	b.n	8004958 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004958:	69bb      	ldr	r3, [r7, #24]
	}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	461a      	mov	r2, r3
 800497c:	21a5      	movs	r1, #165	@ 0xa5
 800497e:	f001 fe23 	bl	80065c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800498c:	3b01      	subs	r3, #1
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	617b      	str	r3, [r7, #20]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01f      	beq.n	8004a04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e012      	b.n	80049f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	7819      	ldrb	r1, [r3, #0]
 80049d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	3334      	adds	r3, #52	@ 0x34
 80049da:	460a      	mov	r2, r1
 80049dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d9e9      	bls.n	80049ca <prvInitialiseNewTask+0x66>
 80049f6:	e000      	b.n	80049fa <prvInitialiseNewTask+0x96>
			{
				break;
 80049f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a02:	e003      	b.n	8004a0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	2b37      	cmp	r3, #55	@ 0x37
 8004a10:	d901      	bls.n	8004a16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a12:	2337      	movs	r3, #55	@ 0x37
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	2200      	movs	r2, #0
 8004a26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f965 	bl	8003cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	3318      	adds	r3, #24
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff f960 	bl	8003cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	3354      	adds	r3, #84	@ 0x54
 8004a66:	224c      	movs	r2, #76	@ 0x4c
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fdac 	bl	80065c8 <memset>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <prvInitialiseNewTask+0x144>)
 8004a74:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	4a0c      	ldr	r2, [pc, #48]	@ (8004aac <prvInitialiseNewTask+0x148>)
 8004a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab0 <prvInitialiseNewTask+0x14c>)
 8004a80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	69b8      	ldr	r0, [r7, #24]
 8004a88:	f001 f95a 	bl	8005d40 <pxPortInitialiseStack>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20004c84 	.word	0x20004c84
 8004aac:	20004cec 	.word	0x20004cec
 8004ab0:	20004d54 	.word	0x20004d54

08004ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004abc:	f001 fa74 	bl	8005fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aca:	4b2c      	ldr	r3, [pc, #176]	@ (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad8:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d110      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ae0:	f000 fc2e 	bl	8005340 <prvInitialiseTaskLists>
 8004ae4:	e00d      	b.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ae6:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aee:	4b23      	ldr	r3, [pc, #140]	@ (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d802      	bhi.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004afc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b02:	4b20      	ldr	r3, [pc, #128]	@ (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a1e      	ldr	r2, [pc, #120]	@ (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b18:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <prvAddNewTaskToReadyList+0xd4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d903      	bls.n	8004b28 <prvAddNewTaskToReadyList+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <prvAddNewTaskToReadyList+0xd4>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <prvAddNewTaskToReadyList+0xd8>)
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7ff f8e9 	bl	8003d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b44:	f001 fa62 	bl	800600c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b48:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b50:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d207      	bcs.n	8004b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <prvAddNewTaskToReadyList+0xdc>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000f04 	.word	0x20000f04
 8004b7c:	20000a30 	.word	0x20000a30
 8004b80:	20000f10 	.word	0x20000f10
 8004b84:	20000f20 	.word	0x20000f20
 8004b88:	20000f0c 	.word	0x20000f0c
 8004b8c:	20000a34 	.word	0x20000a34
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ba6:	4b14      	ldr	r3, [pc, #80]	@ (8004bf8 <vTaskDelay+0x64>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <vTaskDelay+0x32>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60bb      	str	r3, [r7, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bc6:	f000 f88b 	bl	8004ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bca:	2100      	movs	r1, #0
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fd09 	bl	80055e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd2:	f000 f893 	bl	8004cfc <xTaskResumeAll>
 8004bd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004bde:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <vTaskDelay+0x68>)
 8004be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000f2c 	.word	0x20000f2c
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c0e:	463a      	mov	r2, r7
 8004c10:	1d39      	adds	r1, r7, #4
 8004c12:	f107 0308 	add.w	r3, r7, #8
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f81c 	bl	8003c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	9202      	str	r2, [sp, #8]
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	4924      	ldr	r1, [pc, #144]	@ (8004cc0 <vTaskStartScheduler+0xc0>)
 8004c30:	4824      	ldr	r0, [pc, #144]	@ (8004cc4 <vTaskStartScheduler+0xc4>)
 8004c32:	f7ff fdf1 	bl	8004818 <xTaskCreateStatic>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4a23      	ldr	r2, [pc, #140]	@ (8004cc8 <vTaskStartScheduler+0xc8>)
 8004c3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c3c:	4b22      	ldr	r3, [pc, #136]	@ (8004cc8 <vTaskStartScheduler+0xc8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e001      	b.n	8004c4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c54:	f000 fd1a 	bl	800568c <xTimerCreateTimerTask>
 8004c58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d11b      	bne.n	8004c98 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c74:	4b15      	ldr	r3, [pc, #84]	@ (8004ccc <vTaskStartScheduler+0xcc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3354      	adds	r3, #84	@ 0x54
 8004c7a:	4a15      	ldr	r2, [pc, #84]	@ (8004cd0 <vTaskStartScheduler+0xd0>)
 8004c7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <vTaskStartScheduler+0xd4>)
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c86:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <vTaskStartScheduler+0xd8>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <vTaskStartScheduler+0xdc>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c92:	f001 f8e5 	bl	8005e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c96:	e00f      	b.n	8004cb8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d10b      	bne.n	8004cb8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <vTaskStartScheduler+0xb4>
}
 8004cb8:	bf00      	nop
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	080067bc 	.word	0x080067bc
 8004cc4:	08005311 	.word	0x08005311
 8004cc8:	20000f28 	.word	0x20000f28
 8004ccc:	20000a30 	.word	0x20000a30
 8004cd0:	20000010 	.word	0x20000010
 8004cd4:	20000f24 	.word	0x20000f24
 8004cd8:	20000f10 	.word	0x20000f10
 8004cdc:	20000f08 	.word	0x20000f08

08004ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ce4:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <vTaskSuspendAll+0x18>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4a03      	ldr	r2, [pc, #12]	@ (8004cf8 <vTaskSuspendAll+0x18>)
 8004cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20000f2c 	.word	0x20000f2c

08004cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d0a:	4b42      	ldr	r3, [pc, #264]	@ (8004e14 <xTaskResumeAll+0x118>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xTaskResumeAll+0x2e>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	603b      	str	r3, [r7, #0]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d2a:	f001 f93d 	bl	8005fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d2e:	4b39      	ldr	r3, [pc, #228]	@ (8004e14 <xTaskResumeAll+0x118>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4a37      	ldr	r2, [pc, #220]	@ (8004e14 <xTaskResumeAll+0x118>)
 8004d36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d38:	4b36      	ldr	r3, [pc, #216]	@ (8004e14 <xTaskResumeAll+0x118>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d162      	bne.n	8004e06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d40:	4b35      	ldr	r3, [pc, #212]	@ (8004e18 <xTaskResumeAll+0x11c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05e      	beq.n	8004e06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d48:	e02f      	b.n	8004daa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4a:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <xTaskResumeAll+0x120>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3318      	adds	r3, #24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f83a 	bl	8003dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff f835 	bl	8003dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e20 <xTaskResumeAll+0x124>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d903      	bls.n	8004d7a <xTaskResumeAll+0x7e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a2a      	ldr	r2, [pc, #168]	@ (8004e20 <xTaskResumeAll+0x124>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <xTaskResumeAll+0x128>)
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe ffc0 	bl	8003d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9a:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <xTaskResumeAll+0x12c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004da4:	4b21      	ldr	r3, [pc, #132]	@ (8004e2c <xTaskResumeAll+0x130>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004daa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e1c <xTaskResumeAll+0x120>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1cb      	bne.n	8004d4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004db8:	f000 fb66 	bl	8005488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <xTaskResumeAll+0x134>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dc8:	f000 f846 	bl	8004e58 <xTaskIncrementTick>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004dd2:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <xTaskResumeAll+0x130>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f1      	bne.n	8004dc8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <xTaskResumeAll+0x134>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <xTaskResumeAll+0x130>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <xTaskResumeAll+0x138>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e06:	f001 f901 	bl	800600c <vPortExitCritical>

	return xAlreadyYielded;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000f2c 	.word	0x20000f2c
 8004e18:	20000f04 	.word	0x20000f04
 8004e1c:	20000ec4 	.word	0x20000ec4
 8004e20:	20000f0c 	.word	0x20000f0c
 8004e24:	20000a34 	.word	0x20000a34
 8004e28:	20000a30 	.word	0x20000a30
 8004e2c:	20000f18 	.word	0x20000f18
 8004e30:	20000f14 	.word	0x20000f14
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <xTaskGetTickCount+0x1c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e44:	687b      	ldr	r3, [r7, #4]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000f08 	.word	0x20000f08

08004e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e62:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa0 <xTaskIncrementTick+0x148>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 8090 	bne.w	8004f8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa4 <xTaskIncrementTick+0x14c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e74:	4a4b      	ldr	r2, [pc, #300]	@ (8004fa4 <xTaskIncrementTick+0x14c>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d121      	bne.n	8004ec4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e80:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <xTaskIncrementTick+0x150>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	603b      	str	r3, [r7, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	e7fd      	b.n	8004e9e <xTaskIncrementTick+0x46>
 8004ea2:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <xTaskIncrementTick+0x150>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	4b40      	ldr	r3, [pc, #256]	@ (8004fac <xTaskIncrementTick+0x154>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <xTaskIncrementTick+0x150>)
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8004fac <xTaskIncrementTick+0x154>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb0 <xTaskIncrementTick+0x158>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb0 <xTaskIncrementTick+0x158>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	f000 fae2 	bl	8005488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb4 <xTaskIncrementTick+0x15c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d349      	bcc.n	8004f62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ece:	4b36      	ldr	r3, [pc, #216]	@ (8004fa8 <xTaskIncrementTick+0x150>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed8:	4b36      	ldr	r3, [pc, #216]	@ (8004fb4 <xTaskIncrementTick+0x15c>)
 8004eda:	f04f 32ff 	mov.w	r2, #4294967295
 8004ede:	601a      	str	r2, [r3, #0]
					break;
 8004ee0:	e03f      	b.n	8004f62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <xTaskIncrementTick+0x150>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d203      	bcs.n	8004f02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004efa:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb4 <xTaskIncrementTick+0x15c>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f00:	e02f      	b.n	8004f62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe ff62 	bl	8003dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3318      	adds	r3, #24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe ff59 	bl	8003dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <xTaskIncrementTick+0x160>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d903      	bls.n	8004f32 <xTaskIncrementTick+0xda>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	4a22      	ldr	r2, [pc, #136]	@ (8004fb8 <xTaskIncrementTick+0x160>)
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fbc <xTaskIncrementTick+0x164>)
 8004f40:	441a      	add	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f7fe fee4 	bl	8003d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <xTaskIncrementTick+0x168>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3b8      	bcc.n	8004ece <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f60:	e7b5      	b.n	8004ece <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f62:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <xTaskIncrementTick+0x168>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	4914      	ldr	r1, [pc, #80]	@ (8004fbc <xTaskIncrementTick+0x164>)
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d901      	bls.n	8004f7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f7e:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <xTaskIncrementTick+0x16c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e004      	b.n	8004f96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <xTaskIncrementTick+0x170>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc8 <xTaskIncrementTick+0x170>)
 8004f94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f96:	697b      	ldr	r3, [r7, #20]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000f2c 	.word	0x20000f2c
 8004fa4:	20000f08 	.word	0x20000f08
 8004fa8:	20000ebc 	.word	0x20000ebc
 8004fac:	20000ec0 	.word	0x20000ec0
 8004fb0:	20000f1c 	.word	0x20000f1c
 8004fb4:	20000f24 	.word	0x20000f24
 8004fb8:	20000f0c 	.word	0x20000f0c
 8004fbc:	20000a34 	.word	0x20000a34
 8004fc0:	20000a30 	.word	0x20000a30
 8004fc4:	20000f18 	.word	0x20000f18
 8004fc8:	20000f14 	.word	0x20000f14

08004fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <vTaskSwitchContext+0xb4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fda:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <vTaskSwitchContext+0xb8>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fe0:	e047      	b.n	8005072 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004fe2:	4b28      	ldr	r3, [pc, #160]	@ (8005084 <vTaskSwitchContext+0xb8>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe8:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <vTaskSwitchContext+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e011      	b.n	8005014 <vTaskSwitchContext+0x48>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <vTaskSwitchContext+0x42>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	607b      	str	r3, [r7, #4]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <vTaskSwitchContext+0x3e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b01      	subs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	491d      	ldr	r1, [pc, #116]	@ (800508c <vTaskSwitchContext+0xc0>)
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0e3      	beq.n	8004ff0 <vTaskSwitchContext+0x24>
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a16      	ldr	r2, [pc, #88]	@ (800508c <vTaskSwitchContext+0xc0>)
 8005034:	4413      	add	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3308      	adds	r3, #8
 800504a:	429a      	cmp	r2, r3
 800504c:	d104      	bne.n	8005058 <vTaskSwitchContext+0x8c>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	4a0c      	ldr	r2, [pc, #48]	@ (8005090 <vTaskSwitchContext+0xc4>)
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <vTaskSwitchContext+0xbc>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005068:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <vTaskSwitchContext+0xc4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3354      	adds	r3, #84	@ 0x54
 800506e:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <vTaskSwitchContext+0xc8>)
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000f2c 	.word	0x20000f2c
 8005084:	20000f18 	.word	0x20000f18
 8005088:	20000f0c 	.word	0x20000f0c
 800508c:	20000a34 	.word	0x20000a34
 8005090:	20000a30 	.word	0x20000a30
 8005094:	20000010 	.word	0x20000010

08005098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <vTaskPlaceOnEventList+0x48>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3318      	adds	r3, #24
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fe fe48 	bl	8003d5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050ce:	2101      	movs	r1, #1
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f000 fa87 	bl	80055e4 <prvAddCurrentTaskToDelayedList>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000a30 	.word	0x20000a30

080050e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	617b      	str	r3, [r7, #20]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800510e:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <vTaskPlaceOnEventListRestricted+0x54>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3318      	adds	r3, #24
 8005114:	4619      	mov	r1, r3
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7fe fdfd 	bl	8003d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	68b8      	ldr	r0, [r7, #8]
 800512c:	f000 fa5a 	bl	80055e4 <prvAddCurrentTaskToDelayedList>
	}
 8005130:	bf00      	nop
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000a30 	.word	0x20000a30

0800513c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3318      	adds	r3, #24
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fe2e 	bl	8003dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005174:	4b1d      	ldr	r3, [pc, #116]	@ (80051ec <xTaskRemoveFromEventList+0xb0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11d      	bne.n	80051b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fe25 	bl	8003dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518a:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <xTaskRemoveFromEventList+0xb4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d903      	bls.n	800519a <xTaskRemoveFromEventList+0x5e>
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a16      	ldr	r2, [pc, #88]	@ (80051f0 <xTaskRemoveFromEventList+0xb4>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <xTaskRemoveFromEventList+0xb8>)
 80051a8:	441a      	add	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fe fdb0 	bl	8003d16 <vListInsertEnd>
 80051b6:	e005      	b.n	80051c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4619      	mov	r1, r3
 80051be:	480e      	ldr	r0, [pc, #56]	@ (80051f8 <xTaskRemoveFromEventList+0xbc>)
 80051c0:	f7fe fda9 	bl	8003d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c8:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <xTaskRemoveFromEventList+0xc0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d905      	bls.n	80051de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <xTaskRemoveFromEventList+0xc4>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e001      	b.n	80051e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051e2:	697b      	ldr	r3, [r7, #20]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000f2c 	.word	0x20000f2c
 80051f0:	20000f0c 	.word	0x20000f0c
 80051f4:	20000a34 	.word	0x20000a34
 80051f8:	20000ec4 	.word	0x20000ec4
 80051fc:	20000a30 	.word	0x20000a30
 8005200:	20000f18 	.word	0x20000f18

08005204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <vTaskInternalSetTimeOutState+0x24>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <vTaskInternalSetTimeOutState+0x28>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	605a      	str	r2, [r3, #4]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000f1c 	.word	0x20000f1c
 800522c:	20000f08 	.word	0x20000f08

08005230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	613b      	str	r3, [r7, #16]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10b      	bne.n	8005276 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005276:	f000 fe97 	bl	8005fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800527a:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <xTaskCheckForTimeOut+0xc0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d102      	bne.n	800529a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	e023      	b.n	80052e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b15      	ldr	r3, [pc, #84]	@ (80052f4 <xTaskCheckForTimeOut+0xc4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d007      	beq.n	80052b6 <xTaskCheckForTimeOut+0x86>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d302      	bcc.n	80052b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e015      	b.n	80052e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d20b      	bcs.n	80052d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff ff99 	bl	8005204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e004      	b.n	80052e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052e2:	f000 fe93 	bl	800600c <vPortExitCritical>

	return xReturn;
 80052e6:	69fb      	ldr	r3, [r7, #28]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000f08 	.word	0x20000f08
 80052f4:	20000f1c 	.word	0x20000f1c

080052f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <vTaskMissedYield+0x14>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000f18 	.word	0x20000f18

08005310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005318:	f000 f852 	bl	80053c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800531c:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <prvIdleTask+0x28>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d9f9      	bls.n	8005318 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <prvIdleTask+0x2c>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005334:	e7f0      	b.n	8005318 <prvIdleTask+0x8>
 8005336:	bf00      	nop
 8005338:	20000a34 	.word	0x20000a34
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e00c      	b.n	8005366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <prvInitialiseTaskLists+0x60>)
 8005358:	4413      	add	r3, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fcae 	bl	8003cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3301      	adds	r3, #1
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b37      	cmp	r3, #55	@ 0x37
 800536a:	d9ef      	bls.n	800534c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800536c:	480d      	ldr	r0, [pc, #52]	@ (80053a4 <prvInitialiseTaskLists+0x64>)
 800536e:	f7fe fca5 	bl	8003cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005372:	480d      	ldr	r0, [pc, #52]	@ (80053a8 <prvInitialiseTaskLists+0x68>)
 8005374:	f7fe fca2 	bl	8003cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005378:	480c      	ldr	r0, [pc, #48]	@ (80053ac <prvInitialiseTaskLists+0x6c>)
 800537a:	f7fe fc9f 	bl	8003cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800537e:	480c      	ldr	r0, [pc, #48]	@ (80053b0 <prvInitialiseTaskLists+0x70>)
 8005380:	f7fe fc9c 	bl	8003cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005384:	480b      	ldr	r0, [pc, #44]	@ (80053b4 <prvInitialiseTaskLists+0x74>)
 8005386:	f7fe fc99 	bl	8003cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <prvInitialiseTaskLists+0x78>)
 800538c:	4a05      	ldr	r2, [pc, #20]	@ (80053a4 <prvInitialiseTaskLists+0x64>)
 800538e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005390:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <prvInitialiseTaskLists+0x7c>)
 8005392:	4a05      	ldr	r2, [pc, #20]	@ (80053a8 <prvInitialiseTaskLists+0x68>)
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000a34 	.word	0x20000a34
 80053a4:	20000e94 	.word	0x20000e94
 80053a8:	20000ea8 	.word	0x20000ea8
 80053ac:	20000ec4 	.word	0x20000ec4
 80053b0:	20000ed8 	.word	0x20000ed8
 80053b4:	20000ef0 	.word	0x20000ef0
 80053b8:	20000ebc 	.word	0x20000ebc
 80053bc:	20000ec0 	.word	0x20000ec0

080053c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053c6:	e019      	b.n	80053fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053c8:	f000 fdee 	bl	8005fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053cc:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <prvCheckTasksWaitingTermination+0x50>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fcf9 	bl	8003dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <prvCheckTasksWaitingTermination+0x54>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005414 <prvCheckTasksWaitingTermination+0x54>)
 80053e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053f2:	f000 fe0b 	bl	800600c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f810 	bl	800541c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e1      	bne.n	80053c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000ed8 	.word	0x20000ed8
 8005414:	20000f04 	.word	0x20000f04
 8005418:	20000eec 	.word	0x20000eec

0800541c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3354      	adds	r3, #84	@ 0x54
 8005428:	4618      	mov	r0, r3
 800542a:	f001 f8d5 	bl	80065d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ffa3 	bl	8006388 <vPortFree>
				vPortFree( pxTCB );
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 ffa0 	bl	8006388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005448:	e019      	b.n	800547e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005450:	2b01      	cmp	r3, #1
 8005452:	d103      	bne.n	800545c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 ff97 	bl	8006388 <vPortFree>
	}
 800545a:	e010      	b.n	800547e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005462:	2b02      	cmp	r3, #2
 8005464:	d00b      	beq.n	800547e <prvDeleteTCB+0x62>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60fb      	str	r3, [r7, #12]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <prvDeleteTCB+0x5e>
	}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800548e:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <prvResetNextTaskUnblockTime+0x38>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <prvResetNextTaskUnblockTime+0x3c>)
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054a0:	e008      	b.n	80054b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a2:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <prvResetNextTaskUnblockTime+0x38>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a04      	ldr	r2, [pc, #16]	@ (80054c4 <prvResetNextTaskUnblockTime+0x3c>)
 80054b2:	6013      	str	r3, [r2, #0]
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000ebc 	.word	0x20000ebc
 80054c4:	20000f24 	.word	0x20000f24

080054c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054ce:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <xTaskGetSchedulerState+0x34>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054d6:	2301      	movs	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	e008      	b.n	80054ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054dc:	4b08      	ldr	r3, [pc, #32]	@ (8005500 <xTaskGetSchedulerState+0x38>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054e4:	2302      	movs	r3, #2
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	e001      	b.n	80054ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ee:	687b      	ldr	r3, [r7, #4]
	}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000f10 	.word	0x20000f10
 8005500:	20000f2c 	.word	0x20000f2c

08005504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d058      	beq.n	80055cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800551a:	4b2f      	ldr	r3, [pc, #188]	@ (80055d8 <xTaskPriorityDisinherit+0xd4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d00b      	beq.n	800553c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60bb      	str	r3, [r7, #8]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556e:	429a      	cmp	r2, r3
 8005570:	d02c      	beq.n	80055cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005576:	2b00      	cmp	r3, #0
 8005578:	d128      	bne.n	80055cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fc26 	bl	8003dd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <xTaskPriorityDisinherit+0xd8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <xTaskPriorityDisinherit+0xa8>
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <xTaskPriorityDisinherit+0xd8>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a09      	ldr	r2, [pc, #36]	@ (80055e0 <xTaskPriorityDisinherit+0xdc>)
 80055ba:	441a      	add	r2, r3
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fba7 	bl	8003d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055cc:	697b      	ldr	r3, [r7, #20]
	}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000a30 	.word	0x20000a30
 80055dc:	20000f0c 	.word	0x20000f0c
 80055e0:	20000a34 	.word	0x20000a34

080055e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ee:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <prvAddCurrentTaskToDelayedList+0x90>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f4:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <prvAddCurrentTaskToDelayedList+0x94>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fbe8 	bl	8003dd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d10a      	bne.n	800561e <prvAddCurrentTaskToDelayedList+0x3a>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560e:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <prvAddCurrentTaskToDelayedList+0x94>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4819      	ldr	r0, [pc, #100]	@ (800567c <prvAddCurrentTaskToDelayedList+0x98>)
 8005618:	f7fe fb7d 	bl	8003d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800561c:	e026      	b.n	800566c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4413      	add	r3, r2
 8005624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005626:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <prvAddCurrentTaskToDelayedList+0x94>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	429a      	cmp	r2, r3
 8005634:	d209      	bcs.n	800564a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005636:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <prvAddCurrentTaskToDelayedList+0x94>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f7fe fb8b 	bl	8003d5e <vListInsert>
}
 8005648:	e010      	b.n	800566c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800564a:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <prvAddCurrentTaskToDelayedList+0x94>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fe fb81 	bl	8003d5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d202      	bcs.n	800566c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005666:	4a08      	ldr	r2, [pc, #32]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000f08 	.word	0x20000f08
 8005678:	20000a30 	.word	0x20000a30
 800567c:	20000ef0 	.word	0x20000ef0
 8005680:	20000ec0 	.word	0x20000ec0
 8005684:	20000ebc 	.word	0x20000ebc
 8005688:	20000f24 	.word	0x20000f24

0800568c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005696:	f000 fb13 	bl	8005cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800569a:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <xTimerCreateTimerTask+0x84>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d021      	beq.n	80056e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056aa:	1d3a      	adds	r2, r7, #4
 80056ac:	f107 0108 	add.w	r1, r7, #8
 80056b0:	f107 030c 	add.w	r3, r7, #12
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fae7 	bl	8003c88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	9202      	str	r2, [sp, #8]
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	2302      	movs	r3, #2
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	460a      	mov	r2, r1
 80056cc:	4911      	ldr	r1, [pc, #68]	@ (8005714 <xTimerCreateTimerTask+0x88>)
 80056ce:	4812      	ldr	r0, [pc, #72]	@ (8005718 <xTimerCreateTimerTask+0x8c>)
 80056d0:	f7ff f8a2 	bl	8004818 <xTaskCreateStatic>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4a11      	ldr	r2, [pc, #68]	@ (800571c <xTimerCreateTimerTask+0x90>)
 80056d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056da:	4b10      	ldr	r3, [pc, #64]	@ (800571c <xTimerCreateTimerTask+0x90>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005704:	697b      	ldr	r3, [r7, #20]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000f60 	.word	0x20000f60
 8005714:	080067c4 	.word	0x080067c4
 8005718:	08005859 	.word	0x08005859
 800571c:	20000f64 	.word	0x20000f64

08005720 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <xTimerGenericCommand+0x30>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	623b      	str	r3, [r7, #32]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005750:	4b19      	ldr	r3, [pc, #100]	@ (80057b8 <xTimerGenericCommand+0x98>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02a      	beq.n	80057ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b05      	cmp	r3, #5
 8005768:	dc18      	bgt.n	800579c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800576a:	f7ff fead 	bl	80054c8 <xTaskGetSchedulerState>
 800576e:	4603      	mov	r3, r0
 8005770:	2b02      	cmp	r3, #2
 8005772:	d109      	bne.n	8005788 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005774:	4b10      	ldr	r3, [pc, #64]	@ (80057b8 <xTimerGenericCommand+0x98>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	f107 0110 	add.w	r1, r7, #16
 800577c:	2300      	movs	r3, #0
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	f7fe fc5a 	bl	8004038 <xQueueGenericSend>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24
 8005786:	e012      	b.n	80057ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <xTimerGenericCommand+0x98>)
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	f107 0110 	add.w	r1, r7, #16
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	f7fe fc50 	bl	8004038 <xQueueGenericSend>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24
 800579a:	e008      	b.n	80057ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <xTimerGenericCommand+0x98>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	f107 0110 	add.w	r1, r7, #16
 80057a4:	2300      	movs	r3, #0
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	f7fe fd48 	bl	800423c <xQueueGenericSendFromISR>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	@ 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000f60 	.word	0x20000f60

080057bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <prvProcessExpiredTimer+0x98>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe fafb 	bl	8003dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	18d1      	adds	r1, r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	6978      	ldr	r0, [r7, #20]
 80057f6:	f000 f8d5 	bl	80059a4 <prvInsertTimerInActiveList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d020      	beq.n	8005842 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff ff88 	bl	8005720 <xTimerGenericCommand>
 8005810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	4798      	blx	r3
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000f58 	.word	0x20000f58

08005858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f859 	bl	800591c <prvGetNextExpireTime>
 800586a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f805 	bl	8005880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005876:	f000 f8d7 	bl	8005a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800587a:	bf00      	nop
 800587c:	e7f0      	b.n	8005860 <prvTimerTask+0x8>
	...

08005880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800588a:	f7ff fa29 	bl	8004ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f866 	bl	8005964 <prvSampleTimeNow>
 8005898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d130      	bne.n	8005902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d806      	bhi.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058ae:	f7ff fa25 	bl	8004cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff81 	bl	80057bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058ba:	e024      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <prvProcessTimerOrBlockTask+0x90>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <prvProcessTimerOrBlockTask+0x50>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <prvProcessTimerOrBlockTask+0x52>
 80058d0:	2300      	movs	r3, #0
 80058d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <prvProcessTimerOrBlockTask+0x94>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f7fe ff65 	bl	80047b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058e6:	f7ff fa09 	bl	8004cfc <xTaskResumeAll>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058f0:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <prvProcessTimerOrBlockTask+0x98>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
}
 8005900:	e001      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005902:	f7ff f9fb 	bl	8004cfc <xTaskResumeAll>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000f5c 	.word	0x20000f5c
 8005914:	20000f60 	.word	0x20000f60
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005924:	4b0e      	ldr	r3, [pc, #56]	@ (8005960 <prvGetNextExpireTime+0x44>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <prvGetNextExpireTime+0x16>
 800592e:	2201      	movs	r2, #1
 8005930:	e000      	b.n	8005934 <prvGetNextExpireTime+0x18>
 8005932:	2200      	movs	r2, #0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005940:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <prvGetNextExpireTime+0x44>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e001      	b.n	8005950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000f58 	.word	0x20000f58

08005964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800596c:	f7ff fa64 	bl	8004e38 <xTaskGetTickCount>
 8005970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005972:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <prvSampleTimeNow+0x3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	429a      	cmp	r2, r3
 800597a:	d205      	bcs.n	8005988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800597c:	f000 f93a 	bl	8005bf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e002      	b.n	800598e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800598e:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <prvSampleTimeNow+0x3c>)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005994:	68fb      	ldr	r3, [r7, #12]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000f68 	.word	0x20000f68

080059a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d812      	bhi.n	80059f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e01b      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059de:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <prvInsertTimerInActiveList+0x7c>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fe f9b8 	bl	8003d5e <vListInsert>
 80059ee:	e012      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d206      	bcs.n	8005a06 <prvInsertTimerInActiveList+0x62>
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e007      	b.n	8005a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a06:	4b07      	ldr	r3, [pc, #28]	@ (8005a24 <prvInsertTimerInActiveList+0x80>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7fe f9a4 	bl	8003d5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000f5c 	.word	0x20000f5c
 8005a24:	20000f58 	.word	0x20000f58

08005a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	@ 0x38
 8005a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2e:	e0ce      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da19      	bge.n	8005a6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	3304      	adds	r3, #4
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61fb      	str	r3, [r7, #28]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a60:	6850      	ldr	r0, [r2, #4]
 8005a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a64:	6892      	ldr	r2, [r2, #8]
 8005a66:	4611      	mov	r1, r2
 8005a68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f2c0 80ae 	blt.w	8005bce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe f9a4 	bl	8003dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a88:	463b      	mov	r3, r7
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff ff6a 	bl	8005964 <prvSampleTimeNow>
 8005a90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	f200 8097 	bhi.w	8005bc8 <prvProcessReceivedCommands+0x1a0>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <prvProcessReceivedCommands+0x78>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005b3f 	.word	0x08005b3f
 8005ab0:	08005b53 	.word	0x08005b53
 8005ab4:	08005b9f 	.word	0x08005b9f
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005ac9 	.word	0x08005ac9
 8005ac0:	08005b3f 	.word	0x08005b3f
 8005ac4:	08005b53 	.word	0x08005b53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	18d1      	adds	r1, r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ae8:	f7ff ff5c 	bl	80059a4 <prvInsertTimerInActiveList>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d06c      	beq.n	8005bcc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d061      	beq.n	8005bcc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	441a      	add	r2, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b1a:	f7ff fe01 	bl	8005720 <xTimerGenericCommand>
 8005b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d152      	bne.n	8005bcc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	61bb      	str	r3, [r7, #24]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b50:	e03d      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	617b      	str	r3, [r7, #20]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	18d1      	adds	r1, r2, r3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b98:	f7ff ff04 	bl	80059a4 <prvInsertTimerInActiveList>
					break;
 8005b9c:	e017      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bae:	f000 fbeb 	bl	8006388 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bb2:	e00c      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005bc6:	e002      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <prvProcessReceivedCommands+0x1a6>
					break;
 8005bcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bce:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <prvProcessReceivedCommands+0x1c8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1d39      	adds	r1, r7, #4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fbce 	bl	8004378 <xQueueReceive>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f47f af26 	bne.w	8005a30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3730      	adds	r7, #48	@ 0x30
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000f60 	.word	0x20000f60

08005bf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bfa:	e049      	b.n	8005c90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe f8db 	bl	8003dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02f      	beq.n	8005c90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d90e      	bls.n	8005c60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7fe f880 	bl	8003d5e <vListInsert>
 8005c5e:	e017      	b.n	8005c90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fd58 	bl	8005720 <xTimerGenericCommand>
 8005c70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	603b      	str	r3, [r7, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c90:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1b0      	bne.n	8005bfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c9a:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <prvSwitchTimerLists+0xc8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <prvSwitchTimerLists+0xc4>)
 8005ca6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ca8:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <prvSwitchTimerLists+0xc8>)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000f58 	.word	0x20000f58
 8005cbc:	20000f5c 	.word	0x20000f5c

08005cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cc6:	f000 f96f 	bl	8005fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cca:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <prvCheckForValidListAndQueue+0x60>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d120      	bne.n	8005d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cd2:	4814      	ldr	r0, [pc, #80]	@ (8005d24 <prvCheckForValidListAndQueue+0x64>)
 8005cd4:	f7fd fff2 	bl	8003cbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005cd8:	4813      	ldr	r0, [pc, #76]	@ (8005d28 <prvCheckForValidListAndQueue+0x68>)
 8005cda:	f7fd ffef 	bl	8003cbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cde:	4b13      	ldr	r3, [pc, #76]	@ (8005d2c <prvCheckForValidListAndQueue+0x6c>)
 8005ce0:	4a10      	ldr	r2, [pc, #64]	@ (8005d24 <prvCheckForValidListAndQueue+0x64>)
 8005ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ce4:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <prvCheckForValidListAndQueue+0x70>)
 8005ce6:	4a10      	ldr	r2, [pc, #64]	@ (8005d28 <prvCheckForValidListAndQueue+0x68>)
 8005ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cea:	2300      	movs	r3, #0
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <prvCheckForValidListAndQueue+0x74>)
 8005cf0:	4a11      	ldr	r2, [pc, #68]	@ (8005d38 <prvCheckForValidListAndQueue+0x78>)
 8005cf2:	2110      	movs	r1, #16
 8005cf4:	200a      	movs	r0, #10
 8005cf6:	f7fe f8ff 	bl	8003ef8 <xQueueGenericCreateStatic>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4a08      	ldr	r2, [pc, #32]	@ (8005d20 <prvCheckForValidListAndQueue+0x60>)
 8005cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <prvCheckForValidListAndQueue+0x60>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d08:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <prvCheckForValidListAndQueue+0x60>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	490b      	ldr	r1, [pc, #44]	@ (8005d3c <prvCheckForValidListAndQueue+0x7c>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fd24 	bl	800475c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d14:	f000 f97a 	bl	800600c <vPortExitCritical>
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000f60 	.word	0x20000f60
 8005d24:	20000f30 	.word	0x20000f30
 8005d28:	20000f44 	.word	0x20000f44
 8005d2c:	20000f58 	.word	0x20000f58
 8005d30:	20000f5c 	.word	0x20000f5c
 8005d34:	2000100c 	.word	0x2000100c
 8005d38:	20000f6c 	.word	0x20000f6c
 8005d3c:	080067cc 	.word	0x080067cc

08005d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b04      	subs	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d70:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <pxPortInitialiseStack+0x64>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3b14      	subs	r3, #20
 8005d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f06f 0202 	mvn.w	r2, #2
 8005d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3b20      	subs	r3, #32
 8005d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	08005da9 	.word	0x08005da9

08005da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005db2:	4b13      	ldr	r3, [pc, #76]	@ (8005e00 <prvTaskExitError+0x58>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d00b      	beq.n	8005dd4 <prvTaskExitError+0x2c>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <prvTaskExitError+0x28>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
}
 8005de6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005de8:	bf00      	nop
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0fc      	beq.n	8005dea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	2000000c 	.word	0x2000000c
	...

08005e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <pxCurrentTCBConst2>)
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	6808      	ldr	r0, [r1, #0]
 8005e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	f380 8809 	msr	PSP, r0
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	4770      	bx	lr
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst2>:
 8005e30:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e38:	4808      	ldr	r0, [pc, #32]	@ (8005e5c <prvPortStartFirstTask+0x24>)
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f380 8808 	msr	MSP, r0
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8814 	msr	CONTROL, r0
 8005e4a:	b662      	cpsie	i
 8005e4c:	b661      	cpsie	f
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	df00      	svc	0
 8005e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed08 	.word	0xe000ed08

08005e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <xPortStartScheduler+0x124>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a47      	ldr	r2, [pc, #284]	@ (8005f88 <xPortStartScheduler+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10b      	bne.n	8005e88 <xPortStartScheduler+0x28>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	613b      	str	r3, [r7, #16]
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e88:	4b3e      	ldr	r3, [pc, #248]	@ (8005f84 <xPortStartScheduler+0x124>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f8c <xPortStartScheduler+0x12c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10b      	bne.n	8005eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eaa:	4b39      	ldr	r3, [pc, #228]	@ (8005f90 <xPortStartScheduler+0x130>)
 8005eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	22ff      	movs	r2, #255	@ 0xff
 8005eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <xPortStartScheduler+0x134>)
 8005ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ed2:	4b31      	ldr	r3, [pc, #196]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ed8:	e009      	b.n	8005eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eda:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b80      	cmp	r3, #128	@ 0x80
 8005ef8:	d0ef      	beq.n	8005eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005efa:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1c3 0307 	rsb	r3, r3, #7
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d00b      	beq.n	8005f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f30:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f3c:	4b17      	ldr	r3, [pc, #92]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f48:	4b14      	ldr	r3, [pc, #80]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f54:	f000 f8da 	bl	800610c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f58:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <xPortStartScheduler+0x140>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f5e:	f000 f8f9 	bl	8006154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <xPortStartScheduler+0x144>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa4 <xPortStartScheduler+0x144>)
 8005f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f6e:	f7ff ff63 	bl	8005e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f72:	f7ff f82b 	bl	8004fcc <vTaskSwitchContext>
	prvTaskExitError();
 8005f76:	f7ff ff17 	bl	8005da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed00 	.word	0xe000ed00
 8005f88:	410fc271 	.word	0x410fc271
 8005f8c:	410fc270 	.word	0x410fc270
 8005f90:	e000e400 	.word	0xe000e400
 8005f94:	2000105c 	.word	0x2000105c
 8005f98:	20001060 	.word	0x20001060
 8005f9c:	e000ed20 	.word	0xe000ed20
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	e000ef34 	.word	0xe000ef34

08005fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
}
 8005fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d110      	bne.n	8005ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <vPortEnterCritical+0x60>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	603b      	str	r3, [r7, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <vPortEnterCritical+0x4a>
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	2000000c 	.word	0x2000000c
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006012:	4b12      	ldr	r3, [pc, #72]	@ (800605c <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <vPortExitCritical+0x26>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <vPortExitCritical+0x50>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3b01      	subs	r3, #1
 8006038:	4a08      	ldr	r2, [pc, #32]	@ (800605c <vPortExitCritical+0x50>)
 800603a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800603c:	4b07      	ldr	r3, [pc, #28]	@ (800605c <vPortExitCritical+0x50>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <vPortExitCritical+0x44>
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	2000000c 	.word	0x2000000c

08006060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006060:	f3ef 8009 	mrs	r0, PSP
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <pxCurrentTCBConst>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	f01e 0f10 	tst.w	lr, #16
 8006070:	bf08      	it	eq
 8006072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006084:	f380 8811 	msr	BASEPRI, r0
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f7fe ff9c 	bl	8004fcc <vTaskSwitchContext>
 8006094:	f04f 0000 	mov.w	r0, #0
 8006098:	f380 8811 	msr	BASEPRI, r0
 800609c:	bc09      	pop	{r0, r3}
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	6808      	ldr	r0, [r1, #0]
 80060a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a6:	f01e 0f10 	tst.w	lr, #16
 80060aa:	bf08      	it	eq
 80060ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060b0:	f380 8809 	msr	PSP, r0
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	f3af 8000 	nop.w

080060c0 <pxCurrentTCBConst>:
 80060c0:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop

080060c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060e2:	f7fe feb9 	bl	8004e58 <xTaskIncrementTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <xPortSysTickHandler+0x40>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f383 8811 	msr	BASEPRI, r3
}
 80060fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006110:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <vPortSetupTimerInterrupt+0x34>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <vPortSetupTimerInterrupt+0x38>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <vPortSetupTimerInterrupt+0x3c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <vPortSetupTimerInterrupt+0x40>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	099b      	lsrs	r3, r3, #6
 8006128:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <vPortSetupTimerInterrupt+0x44>)
 800612a:	3b01      	subs	r3, #1
 800612c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800612e:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <vPortSetupTimerInterrupt+0x34>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	e000e010 	.word	0xe000e010
 8006144:	e000e018 	.word	0xe000e018
 8006148:	20000000 	.word	0x20000000
 800614c:	10624dd3 	.word	0x10624dd3
 8006150:	e000e014 	.word	0xe000e014

08006154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006164 <vPortEnableVFP+0x10>
 8006158:	6801      	ldr	r1, [r0, #0]
 800615a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800615e:	6001      	str	r1, [r0, #0]
 8006160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006162:	bf00      	nop
 8006164:	e000ed88 	.word	0xe000ed88

08006168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800616e:	f3ef 8305 	mrs	r3, IPSR
 8006172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d915      	bls.n	80061a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800617a:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <vPortValidateInterruptPriority+0x74>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006184:	4b16      	ldr	r3, [pc, #88]	@ (80061e0 <vPortValidateInterruptPriority+0x78>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	7afa      	ldrb	r2, [r7, #11]
 800618a:	429a      	cmp	r2, r3
 800618c:	d20b      	bcs.n	80061a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	607b      	str	r3, [r7, #4]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061a6:	4b0f      	ldr	r3, [pc, #60]	@ (80061e4 <vPortValidateInterruptPriority+0x7c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061ae:	4b0e      	ldr	r3, [pc, #56]	@ (80061e8 <vPortValidateInterruptPriority+0x80>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d90b      	bls.n	80061ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	603b      	str	r3, [r7, #0]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <vPortValidateInterruptPriority+0x62>
	}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	e000e3f0 	.word	0xe000e3f0
 80061e0:	2000105c 	.word	0x2000105c
 80061e4:	e000ed0c 	.word	0xe000ed0c
 80061e8:	20001060 	.word	0x20001060

080061ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061f8:	f7fe fd72 	bl	8004ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006370 <pvPortMalloc+0x184>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006204:	f000 f924 	bl	8006450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006208:	4b5a      	ldr	r3, [pc, #360]	@ (8006374 <pvPortMalloc+0x188>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 8095 	bne.w	8006340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01e      	beq.n	800625a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800621c:	2208      	movs	r2, #8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4413      	add	r3, r2
 8006222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d015      	beq.n	800625a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	3308      	adds	r3, #8
 8006236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <pvPortMalloc+0x6e>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	617b      	str	r3, [r7, #20]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d06f      	beq.n	8006340 <pvPortMalloc+0x154>
 8006260:	4b45      	ldr	r3, [pc, #276]	@ (8006378 <pvPortMalloc+0x18c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d86a      	bhi.n	8006340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800626a:	4b44      	ldr	r3, [pc, #272]	@ (800637c <pvPortMalloc+0x190>)
 800626c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800626e:	4b43      	ldr	r3, [pc, #268]	@ (800637c <pvPortMalloc+0x190>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006274:	e004      	b.n	8006280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d903      	bls.n	8006292 <pvPortMalloc+0xa6>
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f1      	bne.n	8006276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006292:	4b37      	ldr	r3, [pc, #220]	@ (8006370 <pvPortMalloc+0x184>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006298:	429a      	cmp	r2, r3
 800629a:	d051      	beq.n	8006340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	4413      	add	r3, r2
 80062a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	2308      	movs	r3, #8
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d920      	bls.n	8006300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <pvPortMalloc+0xfc>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062fa:	69b8      	ldr	r0, [r7, #24]
 80062fc:	f000 f90a 	bl	8006514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006300:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <pvPortMalloc+0x18c>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	4a1b      	ldr	r2, [pc, #108]	@ (8006378 <pvPortMalloc+0x18c>)
 800630c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800630e:	4b1a      	ldr	r3, [pc, #104]	@ (8006378 <pvPortMalloc+0x18c>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <pvPortMalloc+0x194>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800631a:	4b17      	ldr	r3, [pc, #92]	@ (8006378 <pvPortMalloc+0x18c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a18      	ldr	r2, [pc, #96]	@ (8006380 <pvPortMalloc+0x194>)
 8006320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4b13      	ldr	r3, [pc, #76]	@ (8006374 <pvPortMalloc+0x188>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	431a      	orrs	r2, r3
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006336:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <pvPortMalloc+0x198>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a11      	ldr	r2, [pc, #68]	@ (8006384 <pvPortMalloc+0x198>)
 800633e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006340:	f7fe fcdc 	bl	8004cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <pvPortMalloc+0x17a>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <pvPortMalloc+0x176>
	return pvReturn;
 8006366:	69fb      	ldr	r3, [r7, #28]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	@ 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20004c6c 	.word	0x20004c6c
 8006374:	20004c80 	.word	0x20004c80
 8006378:	20004c70 	.word	0x20004c70
 800637c:	20004c64 	.word	0x20004c64
 8006380:	20004c74 	.word	0x20004c74
 8006384:	20004c78 	.word	0x20004c78

08006388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d04f      	beq.n	800643a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800639a:	2308      	movs	r3, #8
 800639c:	425b      	negs	r3, r3
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	4b25      	ldr	r3, [pc, #148]	@ (8006444 <vPortFree+0xbc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <vPortFree+0x46>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <vPortFree+0x66>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60bb      	str	r3, [r7, #8]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <vPortFree+0xbc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01e      	beq.n	800643a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11a      	bne.n	800643a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	4b0e      	ldr	r3, [pc, #56]	@ (8006444 <vPortFree+0xbc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006414:	f7fe fc64 	bl	8004ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <vPortFree+0xc0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4413      	add	r3, r2
 8006422:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <vPortFree+0xc0>)
 8006424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006426:	6938      	ldr	r0, [r7, #16]
 8006428:	f000 f874 	bl	8006514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800642c:	4b07      	ldr	r3, [pc, #28]	@ (800644c <vPortFree+0xc4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	4a06      	ldr	r2, [pc, #24]	@ (800644c <vPortFree+0xc4>)
 8006434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006436:	f7fe fc61 	bl	8004cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20004c80 	.word	0x20004c80
 8006448:	20004c70 	.word	0x20004c70
 800644c:	20004c7c 	.word	0x20004c7c

08006450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800645a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800645c:	4b27      	ldr	r3, [pc, #156]	@ (80064fc <prvHeapInit+0xac>)
 800645e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3307      	adds	r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	4a1f      	ldr	r2, [pc, #124]	@ (80064fc <prvHeapInit+0xac>)
 8006480:	4413      	add	r3, r2
 8006482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006488:	4a1d      	ldr	r2, [pc, #116]	@ (8006500 <prvHeapInit+0xb0>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800648e:	4b1c      	ldr	r3, [pc, #112]	@ (8006500 <prvHeapInit+0xb0>)
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800649c:	2208      	movs	r2, #8
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <prvHeapInit+0xb4>)
 80064b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064b2:	4b14      	ldr	r3, [pc, #80]	@ (8006504 <prvHeapInit+0xb4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2200      	movs	r2, #0
 80064b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <prvHeapInit+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <prvHeapInit+0xb4>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <prvHeapInit+0xb8>)
 80064de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4a09      	ldr	r2, [pc, #36]	@ (800650c <prvHeapInit+0xbc>)
 80064e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064e8:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <prvHeapInit+0xc0>)
 80064ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	bf00      	nop
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20001064 	.word	0x20001064
 8006500:	20004c64 	.word	0x20004c64
 8006504:	20004c6c 	.word	0x20004c6c
 8006508:	20004c74 	.word	0x20004c74
 800650c:	20004c70 	.word	0x20004c70
 8006510:	20004c80 	.word	0x20004c80

08006514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800651c:	4b28      	ldr	r3, [pc, #160]	@ (80065c0 <prvInsertBlockIntoFreeList+0xac>)
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e002      	b.n	8006528 <prvInsertBlockIntoFreeList+0x14>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d8f7      	bhi.n	8006522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4413      	add	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d108      	bne.n	8006556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	441a      	add	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	441a      	add	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d118      	bne.n	800659c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b15      	ldr	r3, [pc, #84]	@ (80065c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d00d      	beq.n	8006592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	441a      	add	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e008      	b.n	80065a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006592:	4b0c      	ldr	r3, [pc, #48]	@ (80065c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e003      	b.n	80065a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d002      	beq.n	80065b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20004c64 	.word	0x20004c64
 80065c4:	20004c6c 	.word	0x20004c6c

080065c8 <memset>:
 80065c8:	4402      	add	r2, r0
 80065ca:	4603      	mov	r3, r0
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d100      	bne.n	80065d2 <memset+0xa>
 80065d0:	4770      	bx	lr
 80065d2:	f803 1b01 	strb.w	r1, [r3], #1
 80065d6:	e7f9      	b.n	80065cc <memset+0x4>

080065d8 <_reclaim_reent>:
 80065d8:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <_reclaim_reent+0xa8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4283      	cmp	r3, r0
 80065de:	b570      	push	{r4, r5, r6, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	d04b      	beq.n	800667c <_reclaim_reent+0xa4>
 80065e4:	69c3      	ldr	r3, [r0, #28]
 80065e6:	b1ab      	cbz	r3, 8006614 <_reclaim_reent+0x3c>
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	b16b      	cbz	r3, 8006608 <_reclaim_reent+0x30>
 80065ec:	2500      	movs	r5, #0
 80065ee:	69e3      	ldr	r3, [r4, #28]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	5959      	ldr	r1, [r3, r5]
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d13b      	bne.n	8006670 <_reclaim_reent+0x98>
 80065f8:	3504      	adds	r5, #4
 80065fa:	2d80      	cmp	r5, #128	@ 0x80
 80065fc:	d1f7      	bne.n	80065ee <_reclaim_reent+0x16>
 80065fe:	69e3      	ldr	r3, [r4, #28]
 8006600:	4620      	mov	r0, r4
 8006602:	68d9      	ldr	r1, [r3, #12]
 8006604:	f000 f872 	bl	80066ec <_free_r>
 8006608:	69e3      	ldr	r3, [r4, #28]
 800660a:	6819      	ldr	r1, [r3, #0]
 800660c:	b111      	cbz	r1, 8006614 <_reclaim_reent+0x3c>
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f86c 	bl	80066ec <_free_r>
 8006614:	6961      	ldr	r1, [r4, #20]
 8006616:	b111      	cbz	r1, 800661e <_reclaim_reent+0x46>
 8006618:	4620      	mov	r0, r4
 800661a:	f000 f867 	bl	80066ec <_free_r>
 800661e:	69e1      	ldr	r1, [r4, #28]
 8006620:	b111      	cbz	r1, 8006628 <_reclaim_reent+0x50>
 8006622:	4620      	mov	r0, r4
 8006624:	f000 f862 	bl	80066ec <_free_r>
 8006628:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800662a:	b111      	cbz	r1, 8006632 <_reclaim_reent+0x5a>
 800662c:	4620      	mov	r0, r4
 800662e:	f000 f85d 	bl	80066ec <_free_r>
 8006632:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006634:	b111      	cbz	r1, 800663c <_reclaim_reent+0x64>
 8006636:	4620      	mov	r0, r4
 8006638:	f000 f858 	bl	80066ec <_free_r>
 800663c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800663e:	b111      	cbz	r1, 8006646 <_reclaim_reent+0x6e>
 8006640:	4620      	mov	r0, r4
 8006642:	f000 f853 	bl	80066ec <_free_r>
 8006646:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006648:	b111      	cbz	r1, 8006650 <_reclaim_reent+0x78>
 800664a:	4620      	mov	r0, r4
 800664c:	f000 f84e 	bl	80066ec <_free_r>
 8006650:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006652:	b111      	cbz	r1, 800665a <_reclaim_reent+0x82>
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f849 	bl	80066ec <_free_r>
 800665a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800665c:	b111      	cbz	r1, 8006664 <_reclaim_reent+0x8c>
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f844 	bl	80066ec <_free_r>
 8006664:	6a23      	ldr	r3, [r4, #32]
 8006666:	b14b      	cbz	r3, 800667c <_reclaim_reent+0xa4>
 8006668:	4620      	mov	r0, r4
 800666a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800666e:	4718      	bx	r3
 8006670:	680e      	ldr	r6, [r1, #0]
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f83a 	bl	80066ec <_free_r>
 8006678:	4631      	mov	r1, r6
 800667a:	e7bb      	b.n	80065f4 <_reclaim_reent+0x1c>
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	bf00      	nop
 8006680:	20000010 	.word	0x20000010

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	@ (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	@ (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	@ (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	@ (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 f87e 	bl	8006798 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08006818 	.word	0x08006818
 80066c0:	08006818 	.word	0x08006818
 80066c4:	08006818 	.word	0x08006818
 80066c8:	0800681c 	.word	0x0800681c

080066cc <__retarget_lock_acquire_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_release_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <memcpy>:
 80066d0:	440a      	add	r2, r1
 80066d2:	4291      	cmp	r1, r2
 80066d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	4770      	bx	lr
 80066dc:	b510      	push	{r4, lr}
 80066de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e6:	4291      	cmp	r1, r2
 80066e8:	d1f9      	bne.n	80066de <memcpy+0xe>
 80066ea:	bd10      	pop	{r4, pc}

080066ec <_free_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d041      	beq.n	8006778 <_free_r+0x8c>
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f0c      	subs	r4, r1, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfb8      	it	lt
 80066fe:	18e4      	addlt	r4, r4, r3
 8006700:	f000 f83e 	bl	8006780 <__malloc_lock>
 8006704:	4a1d      	ldr	r2, [pc, #116]	@ (800677c <_free_r+0x90>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	b933      	cbnz	r3, 8006718 <_free_r+0x2c>
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	6014      	str	r4, [r2, #0]
 800670e:	4628      	mov	r0, r5
 8006710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006714:	f000 b83a 	b.w	800678c <__malloc_unlock>
 8006718:	42a3      	cmp	r3, r4
 800671a:	d908      	bls.n	800672e <_free_r+0x42>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	1821      	adds	r1, r4, r0
 8006720:	428b      	cmp	r3, r1
 8006722:	bf01      	itttt	eq
 8006724:	6819      	ldreq	r1, [r3, #0]
 8006726:	685b      	ldreq	r3, [r3, #4]
 8006728:	1809      	addeq	r1, r1, r0
 800672a:	6021      	streq	r1, [r4, #0]
 800672c:	e7ed      	b.n	800670a <_free_r+0x1e>
 800672e:	461a      	mov	r2, r3
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	b10b      	cbz	r3, 8006738 <_free_r+0x4c>
 8006734:	42a3      	cmp	r3, r4
 8006736:	d9fa      	bls.n	800672e <_free_r+0x42>
 8006738:	6811      	ldr	r1, [r2, #0]
 800673a:	1850      	adds	r0, r2, r1
 800673c:	42a0      	cmp	r0, r4
 800673e:	d10b      	bne.n	8006758 <_free_r+0x6c>
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	4401      	add	r1, r0
 8006744:	1850      	adds	r0, r2, r1
 8006746:	4283      	cmp	r3, r0
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	d1e0      	bne.n	800670e <_free_r+0x22>
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	6053      	str	r3, [r2, #4]
 8006752:	4408      	add	r0, r1
 8006754:	6010      	str	r0, [r2, #0]
 8006756:	e7da      	b.n	800670e <_free_r+0x22>
 8006758:	d902      	bls.n	8006760 <_free_r+0x74>
 800675a:	230c      	movs	r3, #12
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	e7d6      	b.n	800670e <_free_r+0x22>
 8006760:	6820      	ldr	r0, [r4, #0]
 8006762:	1821      	adds	r1, r4, r0
 8006764:	428b      	cmp	r3, r1
 8006766:	bf04      	itt	eq
 8006768:	6819      	ldreq	r1, [r3, #0]
 800676a:	685b      	ldreq	r3, [r3, #4]
 800676c:	6063      	str	r3, [r4, #4]
 800676e:	bf04      	itt	eq
 8006770:	1809      	addeq	r1, r1, r0
 8006772:	6021      	streq	r1, [r4, #0]
 8006774:	6054      	str	r4, [r2, #4]
 8006776:	e7ca      	b.n	800670e <_free_r+0x22>
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	20004dc0 	.word	0x20004dc0

08006780 <__malloc_lock>:
 8006780:	4801      	ldr	r0, [pc, #4]	@ (8006788 <__malloc_lock+0x8>)
 8006782:	f7ff bfa3 	b.w	80066cc <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	20004dbc 	.word	0x20004dbc

0800678c <__malloc_unlock>:
 800678c:	4801      	ldr	r0, [pc, #4]	@ (8006794 <__malloc_unlock+0x8>)
 800678e:	f7ff bf9e 	b.w	80066ce <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	20004dbc 	.word	0x20004dbc

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
